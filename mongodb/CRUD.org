#+TITLE:     CRUD
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall


* 1, 查

** 指定需要返回的键

=db.users.find({}, {"username": 1, "email": 1, "_id": 0})=

** $in

#+BEGIN_SRC js
  db.raffle.find({"ticket_no": {"$in": [725, 542, 390]}})

  // 如果 $in 对应的数组只有一个值，那么和直接匹配这个值效果是一样的，例如：
  db.raffle.find({"ticket_no": {"$in": [725]}})
  db.raffle.find({"ticket_no": 725})

  db.raffle.find({"ticket_no": {"$nin": [725, 542, 390]}})
#+END_SRC

** $or

#+BEGIN_SRC js
  db.raffle.find({"$or": [{"ticket_no": 725}, {"winner": true}]})

  db.raffle.find({"$or": [{"ticket_no": {"$in": [725, 542, 390]}}, {"winner": true}]})
#+END_SRC

** $not

=db.users.find({"id_num": {"$not": {"$mod": [5, 1]}}})=

** $and

#+BEGIN_SRC js
  db.users.find({"$and": [{"x": {"$lt": 1}}, {"x": 4}]}) // 可以匹配：{"x": [0, 4]}
  db.users.find({"x": {"$lt": 1, "$in": [4]}})           // 效率更高
#+END_SRC

** $exists

#+BEGIN_SRC js
  db.c.find({"z": {"$in": [null], "$exists": true}}) // 键存在，且为 null 的情况
#+END_SRC

** 数组查询

#+BEGIN_SRC js
  db.food.find({"fruit": "banana"}) // 匹配：["apple", "banana", "peach"]
#+END_SRC

*** $all

#+BEGIN_SRC js
  db.food.find({"fruit": {"$all": ["apple", "banana"]}}) // 匹配：["apple", "banana", "peach"], ["cherry", "banana", "apple"]
#+END_SRC

*** $size

$size 不能与其他查询条件（比如 $gt ）组合使用

#+BEGIN_SRC js
  db.food.find({"fruit": {"$size": 3}})
#+END_SRC

*** $slice

$slice 操作符可以返回某个键匹配的数组元素的一个子集

#+BEGIN_SRC js
  db.blog.posts.findOne(criteria, {"comments": {"$slice": 10}})  // 前 10 条评论
  db.blog.posts.findOne(criteria, {"comments": {"$slice": -10}}) // 后 10 条评论

  db.blog.posts.findOne(criteria, {"comments": {"$slice": [23, 10]}}) // 第 24-33 个元素
#+END_SRC

*** 查询数组特定位置的元素

使用 key.index 语法指定下标

db.food.find({"fruit.2": "peach"})

*** 返回匹配的数组元素

使用 $ 操作符返回与查询条件匹配的 *第一个* 数组元素

#+BEGIN_SRC js
  /*
  {
      "_id" : ObjectId("4b2d75476cc613d5ee930164"),
      "title" : "A blog post",
      "content" : "...",
      "comments" : [
          {
              "name" : "joe",
              "email" : "joe@example.com",
              "content" : "nice post."
          },
          {
              "name" : "bob",
              "email" : "bob@example.com",
              "content" : "good post."
          }
      ]
  }
  ,*/

  db.blog.posts.find({"comments.name" : "bob"}, {"comments.$" : 1})

  /*
  {
      "_id" : ObjectId("4b2d75476cc613d5ee930164"),
      "comments" : [
          {
              "name" : "bob",
              "email" : "bob@example.com",
              "content" : "good post."
          }
      ]
  }
  ,*/
#+END_SRC

*** 数组的范围查询

#+BEGIN_SRC js
  db.test.find({"x": {"$gt": 10, "$lt": 20}}) // 匹配：{"x": 15}, {"x": [5, 25]}
#+END_SRC

**** $elemMatch

使用条件语句与每一个数组元素进行比较

#+BEGIN_SRC js
  db.test.find({"x": {"$elemMatch": {"$gt": 1, "$lt": 30}}}) // 匹配：{"x": [5, 25]}
#+END_SRC
