#+TITLE:     Aggregation
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

* 1, 基本原理

#+BEGIN_SRC js
  db.hello.aggregate([
      {"$match": {"author": {"$exists": true}}},
      {"$group": {"_id": "$author", "count": {"$sum": 1}}}, // 对 author 字段进行分组，对分组内元素依次执行 {"$sum": 1} 操作，
                                                            // 并将结果存储在 count 字段中
      {"$sort": {"count": -1}} ])
#+END_SRC


* 2, 操作符

** $match

** $project

- 重命名字段

#+BEGIN_SRC js
  // $author 也可以使用 $author.xxx 的形式
  db.articles.aggregate([{$project: {"name": "$author", "_id": 0}}])
#+END_SRC

- 数学表达式

  #+BEGIN_SRC js
    db.employees.aggregate(
        [
            {
                $project: {
                    "totalPay": {
                        "$add": ["$salary","$bonus"]
                    }
                }
            }
        ]
    )

    db.employees.aggregate(
        [
            {
                $project: {
                    "totalPay": {
                        "$substract": ["$add": ["$salary", "$bonus"]]
                    }
                }
            }
        ]
    )
  #+END_SRC

- 日期表达式

  - $year
  - $month
  - $week
  - $dayOfMonth
  - $dayOfWeek
  - $dayOfYear
  - $hour
  - $minute
  - $second

  #+BEGIN_SRC js
    db.employees.aggregate(
        [
            {$project: {"hiredIn": {"$month": "$hireDate"}}}
        ]
    )
  #+END_SRC

- 字符串表达式

  - $substr
  - $concat
  - $toLower
  - $toUpper

  #+BEGIN_SRC js
    db.employees.aggregate(
        {
            "$project": {
                "email": {
                    "$concat": [
                        {"$substr": ["$firstName", 0, 1]},
                        ".",
                        "$lastName",
                        "@example.com"
                    ]
                }
            }
        }
    )
  #+END_SRC

- 逻辑表达式

  #+BEGIN_SRC js
    db.students.aggregate(
        {
            "$project": {
                "grade": {
                    "$cond": [
                        "$teachersPet",
                        100, // if
                        {    // else
                            "$add": [
                                {"$multiply": [.1, "$attendance"]},
                                {"$multiply": [.3, "$quiz"]},
                                {"$multiply": [.6, "$test"]}
                            ]
                        }
                    ]
                }
            }
        }
    )
  #+END_SRC


** $group

选定了需要进行分组的字段，就可以将选定的字段传递给 $group 函数的 "_id" 字段：

#+BEGIN_SRC js
  {"$group" : {"_id" : "$grade"}}
  {"$group" : {"_id" : {"state" : "$state", "city" : "$city"}}}
#+END_SRC

- 算数操作符

  - $sum
  - $avg

  #+BEGIN_SRC js
    db.sales.aggregate(
        {
            "$group" : {
                "_id" : "$country",
                "totalRevenue" : {"$average" : "$revenue"},
                "numSales" :     {"$sum" : 1}
            }
        }
    )
  #+END_SRC

- 极值操作符

  - $max
  - $min
  - $first
  - $last

  #+BEGIN_SRC js
    db.scores.aggregate(
        {
            "$sort" : {"score" : 1}
        }
        {
            "$group" : {
                "_id" : "$grade",
                "lowestScore"  : {"$first" : "$score"},
                "highestScore" : {"$last" : "$score"}
            }
        }
    )

    /*
      如果数据是排过序的，那么 $first 和 $last 会比 $min 和 $max 效率高
      否则，直接使用 $min 和 $max 效率更高
     ,*/
  #+END_SRC

- 数组操作符

  - $addToSet
  - $push


** $unwind

$unwind 可以将数组中每一个元素拆分为单独的文档

#+BEGIN_SRC sh
  db.blog.findOne()

  # {
  #     "_id" : ObjectId("50eeffc4c82a5271290530be"),
  #     "author" : "k",
  #     "post" : "Hello, world!",
  #     "comments" : [
  #         {
  #             "author" : "mark",
  #             "date" : ISODate("2013-01-10T17:52:04.148Z"),
  #             "text" : "Nice post"
  #         },
  #         {
  #             "author" : "bill",
  #             "date" : ISODate("2013-01-10T17:52:04.148Z"),
  #             "text" : "I agree"
  #         }
  #     ]
  # }

  db.blog.aggregate({"$unwind" : "$comments"})

  # {
  #     "results" : [
  #         {
  #             "_id" : ObjectId("50eeffc4c82a5271290530be"),
  #             "author" : "k",
  #             "post" : "Hello, world!",
  #             "comments" : {
  #                 "author" : "mark",
  #                 "date" : ISODate("2013-01-10T17:52:04.148Z"),
  #                 "text" : "Nice post"
  #             }
  #         },
  #         {
  #             "_id" : ObjectId("50eeffc4c82a5271290530be"),
  #             "author" : "k",
  #             "post" : "Hello, world!",
  #             "comments" : {
  #                 "author" : "bill",
  #                 "date" : ISODate("2013-01-10T17:52:04.148Z"),
  #                 "text" : "I agree"
  #             }
  #         }
  #     ],
  #     "ok" : 1
  # }

#+END_SRC

** $sort

可以对任意字段（或多个字段）进行排序。如果要对大量文档进行排序，建议在管道的第一阶段建立索引进行排序。否则，排序过程会很慢，且占用大量内存。

** $limit

** $skip