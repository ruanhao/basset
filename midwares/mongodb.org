#+TITLE:     MongoDB
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS:   h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+STARTUP:   showall
#+TOC:       headlines 3
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../org-html-themes/readtheorg/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>

* 环境

** Emacs

1. 安装 [[https://github.com/krisajenkins/ob-mongo][ob-mongo]]
2. =rm -rf ~/.emacs.d/elpa/org-xxxxxxx/*.elc=

** Docker

*** 自定义配置文件

#+BEGIN_SRC sh
  docker run --name some-mongo \
  --rm \
  -p 27017:27017 \
  -v /my/custom:/etc/mongo \
  -d \
  mongo \
  --config /etc/mongo/mongod.conf
#+END_SRC

*** 挂载数据文件

#+BEGIN_SRC sh
  docker run --name some-mongo \
  --rm \
  -p 27017:27017 \
  -v /my/own/datadir:/data/db \
  -d mongo
#+END_SRC




* 查询

#+HTML: <img src="https://docs.mongodb.com/manual/_images/crud-annotated-mongodb-find.bakedsvg.svg"/>

** [[https://docs.mongodb.com/manual/reference/operator/query/][Query and Projection Operators]]

** 基本查询

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.inventory.insertMany([
      { item: "journal",  qty: 25,  size: { h: 14,    w: 21,    uom: "cm" }, status: "A" },
      { item: "notebook", qty: 50,  size: { h: 8.5,   w: 11,    uom: "in" }, status: "A" },
      { item: "paper",    qty: 100, size: { h: 8.5,   w: 11,    uom: "in" }, status: "D" },
      { item: "planner",  qty: 75,  size: { h: 22.85, w: 30,    uom: "cm" }, status: "D" },
      { item: "postcard", qty: 45,  size: { h: 10,    w: 15.25, uom: "cm" }, status: "A" }
  ]);
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "acknowledged": true,
  "insertedIds": [
    ObjectId("5afcf55ea79692f89606ccae"),
    ObjectId("5afcf55ea79692f89606ccaf"),
    ObjectId("5afcf55ea79692f89606ccb0"),
    ObjectId("5afcf55ea79692f89606ccb1"),
    ObjectId("5afcf55ea79692f89606ccb2")
  ]
}
#+end_example

*** 查询所有

#+BEGIN_SRC mongo
  db.inventory.find({})
#+END_SRC

*** 指定相等条件

#+BEGIN_SRC mongo
  db.inventory.find( { status: "D" } )
#+END_SRC

*** 查询操作符

#+BEGIN_SRC mongo
  db.inventory.find( { status: { $in: [ "A", "D" ] } } )
#+END_SRC

*** 与或条件

- AND

#+BEGIN_SRC mongo
  db.inventory.find( { status: "A", qty: { $lt: 30 } } )
#+END_SRC

- OR

#+BEGIN_SRC mongo
  db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )
#+END_SRC


- AND/OR

#+BEGIN_SRC mongo
  db.inventory.find( {
      status: "A",
      $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
  } )
#+END_SRC

*** 查询内嵌文档


#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { "size.h": { $lt: 15 }, "size.uom": "in", status: "D" } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afcf55ea79692f89606ccb0"),
  "item": "paper",
  "qty": 100,
  "size": {
    "h": 8.5,
    "w": 11,
    "uom": "in"
  },
  "status": "D"
}
{
  "_id": ObjectId("5afcf69e6b80eeb86ce1214b"),
  "item": "paper",
  "qty": 100,
  "size": {
    "h": 8.5,
    "w": 11,
    "uom": "in"
  },
  "status": "D"
}
Fetched 2 record(s) in 1ms
#+end_example


** 查询数组

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.inventory.insertMany([
      { item: "journal",  qty: 25,  tags: ["blank", "red"],          dim_cm: [ 14, 21 ] },
      { item: "notebook", qty: 50,  tags: ["red", "blank"],          dim_cm: [ 14, 21 ] },
      { item: "paper",    qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
      { item: "planner",  qty: 75,  tags: ["blank", "red"],          dim_cm: [ 22.85, 30 ] },
      { item: "postcard", qty: 45,  tags: ["blue"],                  dim_cm: [ 10, 15.25 ] }
  ]);
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "acknowledged": true,
  "insertedIds": [
    ObjectId("5afd147215241dd2cdb767cb"),
    ObjectId("5afd147215241dd2cdb767cc"),
    ObjectId("5afd147215241dd2cdb767cd"),
    ObjectId("5afd147215241dd2cdb767ce"),
    ObjectId("5afd147215241dd2cdb767cf")
  ]
}
#+end_example

*** 查询数组中的元素

下述语法都是表示 *数组中是否有一个元素满足条件*

  #+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
    db.inventory.find( { tags: "red" } ).limit(1)
  #+END_SRC

  #+RESULTS:
  #+begin_example
  Mongo-Hacker 0.0.14
  {
    "_id": ObjectId("5afd147215241dd2cdb767cb"),
    "item": "journal",
    "qty": 25,
    "tags": [
      "blank",
      "red"
    ],
    "dim_cm": [
      14,
      21
    ]
  }
  Fetched 1 record(s) in 4ms
  #+end_example

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { dim_cm: { $gt: 25 } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd147215241dd2cdb767ce"),
  "item": "planner",
  "qty": 75,
  "tags": [
    "blank",
    "red"
  ],
  "dim_cm": [
    22.85,
    30
  ]
}
Fetched 1 record(s) in 1ms
#+end_example

*** 为元素指定多个条件

下述例子不是针对某个元素，而是指 *是否有一个大于15，有另一个小于20*

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { dim_cm: { $gt: 15, $lt: 20 } } ).limit(1)
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd147215241dd2cdb767cb"),
  "item": "journal",
  "qty": 25,
  "tags": [
    "blank",
    "red"
  ],
  "dim_cm": [
    14,
    21
  ]
}
Fetched 1 record(s) in 1ms
#+end_example

使用 *$elemMatch* 针对某个元素进行查询

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd147215241dd2cdb767ce"),
  "item": "planner",
  "qty": 75,
  "tags": [
    "blank",
    "red"
  ],
  "dim_cm": [
    22.85,
    30
  ]
}
Fetched 1 record(s) in 3ms
#+end_example

*** 通过数组下标进行查询

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { "dim_cm.1": { $gt: 25 } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd147215241dd2cdb767ce"),
  "item": "planner",
  "qty": 75,
  "tags": [
    "blank",
    "red"
  ],
  "dim_cm": [
    22.85,
    30
  ]
}
Fetched 1 record(s) in 1ms
#+end_example

*** 通过数组长度查询

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { "tags": { $size: 3 } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd147215241dd2cdb767cd"),
  "item": "paper",
  "qty": 100,
  "tags": [
    "red",
    "blank",
    "plain"
  ],
  "dim_cm": [
    14,
    21
  ]
}
Fetched 1 record(s) in 1ms
#+end_example


** 查询内嵌文档数组

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.inventory.insertMany( [
      { item: "journal",  instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
      { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
      { item: "paper",    instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
      { item: "planner",  instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
      { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
  ]);
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "acknowledged": true,
  "insertedIds": [
    ObjectId("5afd1a3dd67e8e37de8014fb"),
    ObjectId("5afd1a3dd67e8e37de8014fc"),
    ObjectId("5afd1a3dd67e8e37de8014fd"),
    ObjectId("5afd1a3dd67e8e37de8014fe"),
    ObjectId("5afd1a3dd67e8e37de8014ff")
  ]
}
#+end_example

*** 对字段查询

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { 'instock.qty': { $lte: 20 } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fb"),
  "item": "journal",
  "instock": [
    {
      "warehouse": "A",
      "qty": 5
    },
    {
      "warehouse": "C",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fc"),
  "item": "notebook",
  "instock": [
    {
      "warehouse": "C",
      "qty": 5
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fd"),
  "item": "paper",
  "instock": [
    {
      "warehouse": "A",
      "qty": 60
    },
    {
      "warehouse": "B",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fe"),
  "item": "planner",
  "instock": [
    {
      "warehouse": "A",
      "qty": 40
    },
    {
      "warehouse": "B",
      "qty": 5
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014ff"),
  "item": "postcard",
  "instock": [
    {
      "warehouse": "B",
      "qty": 15
    },
    {
      "warehouse": "C",
      "qty": 35
    }
  ]
}
Fetched 5 record(s) in 3ms
#+end_example



*** 使用索引查询

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { 'instock.0.qty': { $lte: 20 } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fb"),
  "item": "journal",
  "instock": [
    {
      "warehouse": "A",
      "qty": 5
    },
    {
      "warehouse": "C",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fc"),
  "item": "notebook",
  "instock": [
    {
      "warehouse": "C",
      "qty": 5
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014ff"),
  "item": "postcard",
  "instock": [
    {
      "warehouse": "B",
      "qty": 15
    },
    {
      "warehouse": "C",
      "qty": 35
    }
  ]
}
Fetched 3 record(s) in 4ms
#+end_example

*** 指定多个条件

- 针对单个文档

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { "instock": { $elemMatch: { qty: 5, warehouse: "A" } } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fb"),
  "item": "journal",
  "instock": [
    {
      "warehouse": "A",
      "qty": 5
    },
    {
      "warehouse": "C",
      "qty": 15
    }
  ]
}
Fetched 1 record(s) in 1ms
#+end_example


#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fb"),
  "item": "journal",
  "instock": [
    {
      "warehouse": "A",
      "qty": 5
    },
    {
      "warehouse": "C",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fd"),
  "item": "paper",
  "instock": [
    {
      "warehouse": "A",
      "qty": 60
    },
    {
      "warehouse": "B",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014ff"),
  "item": "postcard",
  "instock": [
    {
      "warehouse": "B",
      "qty": 15
    },
    {
      "warehouse": "C",
      "qty": 35
    }
  ]
}
Fetched 3 record(s) in 2ms
#+end_example

- 不针对单个文档

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { "instock.qty": { $gt: 10,  $lte: 20 } } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fb"),
  "item": "journal",
  "instock": [
    {
      "warehouse": "A",
      "qty": 5
    },
    {
      "warehouse": "C",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fd"),
  "item": "paper",
  "instock": [
    {
      "warehouse": "A",
      "qty": 60
    },
    {
      "warehouse": "B",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fe"),
  "item": "planner",
  "instock": [
    {
      "warehouse": "A",
      "qty": 40
    },
    {
      "warehouse": "B",
      "qty": 5
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014ff"),
  "item": "postcard",
  "instock": [
    {
      "warehouse": "B",
      "qty": 15
    },
    {
      "warehouse": "C",
      "qty": 35
    }
  ]
}
Fetched 4 record(s) in 2ms
#+end_example

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { "instock.qty": 5, "instock.warehouse": "A" } )
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fb"),
  "item": "journal",
  "instock": [
    {
      "warehouse": "A",
      "qty": 5
    },
    {
      "warehouse": "C",
      "qty": 15
    }
  ]
}
{
  "_id": ObjectId("5afd1a3dd67e8e37de8014fe"),
  "item": "planner",
  "instock": [
    {
      "warehouse": "A",
      "qty": 40
    },
    {
      "warehouse": "B",
      "qty": 5
    }
  ]
}
Fetched 2 record(s) in 2ms
#+end_example






** 对查询结果投影

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.inventory.insertMany( [
      { item: "journal",
        status: "A",
        size: { h: 14, w: 21, uom: "cm" },
        instock: [ { warehouse: "A", qty: 5 } ] },
      { item: "notebook",
        status: "A",
        size: { h: 8.5, w: 11, uom: "in" },
        instock: [ { warehouse: "C", qty: 5 } ] },
      { item: "paper",
        status: "D",
        size: { h: 8.5, w: 11, uom: "in" },
        instock: [ { warehouse: "A", qty: 60 } ] },
      { item: "planner",
        status: "D",
        size: { h: 22.85, w: 30, uom: "cm" },
        instock: [ { warehouse: "A", qty: 40 } ] },
      { item: "postcard",
        status: "A",
        size: { h: 10, w: 15.25, uom: "cm" },
        instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
  ]);
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "acknowledged": true,
  "insertedIds": [
    ObjectId("5afd219310a81f112bcd9a50"),
    ObjectId("5afd219310a81f112bcd9a51"),
    ObjectId("5afd219310a81f112bcd9a52"),
    ObjectId("5afd219310a81f112bcd9a53"),
    ObjectId("5afd219310a81f112bcd9a54")
  ]
}
#+end_example

*** 包含某些字段

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } ).limit(3)
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "item": "journal",
  "status": "A"
}
{
  "item": "notebook",
  "status": "A"
}
{
  "item": "postcard",
  "status": "A"
}
Fetched 3 record(s) in 1ms
#+end_example


*** 排除某些字段

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { status: "A" }, { status: 0, instock: 0 } ).limit(3)
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afcf55ea79692f89606ccae"),
  "item": "journal",
  "qty": 25,
  "size": {
    "h": 14,
    "w": 21,
    "uom": "cm"
  }
}
{
  "_id": ObjectId("5afcf55ea79692f89606ccaf"),
  "item": "notebook",
  "qty": 50,
  "size": {
    "h": 8.5,
    "w": 11,
    "uom": "in"
  }
}
{
  "_id": ObjectId("5afcf55ea79692f89606ccb2"),
  "item": "postcard",
  "qty": 45,
  "size": {
    "h": 10,
    "w": 15.25,
    "uom": "cm"
  }
}
Fetched 3 record(s) in 1ms
#+end_example

*** 对内嵌文档字段投影

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find(
     { status: "A" },
     { item: 1, status: 1, "size.uom": 1 }
  ).limit(3)
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afcf55ea79692f89606ccae"),
  "item": "journal",
  "size": {
    "uom": "cm"
  },
  "status": "A"
}
{
  "_id": ObjectId("5afcf55ea79692f89606ccaf"),
  "item": "notebook",
  "size": {
    "uom": "in"
  },
  "status": "A"
}
{
  "_id": ObjectId("5afcf55ea79692f89606ccb2"),
  "item": "postcard",
  "size": {
    "uom": "cm"
  },
  "status": "A"
}
Fetched 3 record(s) in 2ms
#+end_example

*** 对内嵌文档数组字段投影

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { status: "A" }, { item: 1, status: 1, "instock.qty": 1 } ).limit(3)
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afcf55ea79692f89606ccae"),
  "item": "journal",
  "status": "A"
}
{
  "_id": ObjectId("5afcf55ea79692f89606ccaf"),
  "item": "notebook",
  "status": "A"
}
{
  "_id": ObjectId("5afcf55ea79692f89606ccb2"),
  "item": "postcard",
  "status": "A"
}
Fetched 3 record(s) in 2ms
#+end_example

*** 对返回结果中数组投影

只能使用 [[https://docs.mongodb.com/manual/reference/operator/projection/elemMatch/#proj._S_elemMatch][$elemMatch]], [[https://docs.mongodb.com/manual/reference/operator/projection/slice/#proj._S_slice][$slice]], [[https://docs.mongodb.com/manual/reference/operator/projection/positional/#proj._S_][$]] 对返回结果中的数组进行投影

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { status: "A" }, { item: 1, status: 1, instock: { $slice: -1 } } ).limit(3)
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "_id": ObjectId("5afd219310a81f112bcd9a50"),
  "item": "journal",
  "status": "A",
  "instock": [
    {
      "warehouse": "A",
      "qty": 5
    }
  ]
}
{
  "_id": ObjectId("5afd219310a81f112bcd9a51"),
  "item": "notebook",
  "status": "A",
  "instock": [
    {
      "warehouse": "C",
      "qty": 5
    }
  ]
}
{
  "_id": ObjectId("5afd219310a81f112bcd9a54"),
  "item": "postcard",
  "status": "A",
  "instock": [
    {
      "warehouse": "C",
      "qty": 35
    }
  ]
}
Fetched 3 record(s) in 2ms
#+end_example


** 查询 Null 或 Missing 字段

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.inventory.insertMany([
     { _id: 1, item: null },
     { _id: 2 }
  ])
#+END_SRC

#+RESULTS:
: Mongo-Hacker 0.0.14
: {
:   "acknowledged": true,
:   "insertedIds": [
:     1,
:     2
:   ]
: }

*** 空值检查

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { item: null } )
#+END_SRC

#+RESULTS:
: Mongo-Hacker 0.0.14
: {
:   "_id": 1,
:   "item": null
: }
: {
:   "_id": 2
: }
: Fetched 2 record(s) in 1ms


*** 类型检查

[[https://docs.mongodb.com/manual/reference/bson-types/][BSON Type]]

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { item : { $type: 10 } } )
#+END_SRC

#+RESULTS:
: Mongo-Hacker 0.0.14
: {
:   "_id": 1,
:   "item": null
: }
: Fetched 1 record(s) in 1ms

*** 字段存在检查

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.inventory.find( { item : { $exists: false } } )
#+END_SRC

#+RESULTS:
: Mongo-Hacker 0.0.14
: {
:   "_id": 2
: }
: Fetched 1 record(s) in 1ms


** [[https://docs.mongodb.com/manual/tutorial/iterate-a-cursor/][在 shell 中使用游标]]

The =db.collection.find()= method returns a cursor. To access the documents, you need to iterate the cursor.

However, in the mongo shell, if the returned cursor is not assigned to a variable using the var keyword,
then the cursor is automatically *iterated up to 20 times* to print up to the first 20 documents in the results.



* 聚合

** [[https://docs.mongodb.com/manual/meta/aggregation-quick-reference/][Pipeline stages]]

#+HTML: <img src="https://docs.mongodb.com/manual/_images/aggregation-pipeline.bakedsvg.svg"/>


*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/addFields/][$addFields]]

*不能为一个数组字段添加元素*

**** 使用 2 次 $addFields

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.scores.insertMany(
      [
          {
              _id: 1,
              student: "Maya",
              homework: [ 10, 5, 10 ],
              quiz: [ 10, 8 ],
              extraCredit: 0
          },
          {
              _id: 2,
              student: "Ryan",
              homework: [ 5, 6, 5 ],
              quiz: [ 8, 8 ],
              extraCredit: 8
          }
      ]
  );
#+END_SRC

#+RESULTS:
: Mongo-Hacker 0.0.14
: {
:   "acknowledged": true,
:   "insertedIds": [
:     1,
:     2
:   ]
: }

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.scores.aggregate( [
      {
          $addFields: {
              totalHomework: { $sum: "$homework" } ,
              totalQuiz: { $sum: "$quiz" }
          }
      },
      {
          $addFields: { totalScore: { $add: [ "$totalHomework", "$totalQuiz", "$extraCredit" ] } }
      }
  ] )
#+END_SRC


#+BEGIN_EXAMPLE
  /* 1 */
  {
      "_id" : 1.0,
      "student" : "Maya",
      "homework" : [
          10.0,
          5.0,
          10.0
      ],
      "quiz" : [
          10.0,
          8.0
      ],
      "extraCredit" : 0.0,
      "totalHomework" : 25.0,
      "totalQuiz" : 18.0,
      "totalScore" : 43.0
  }

  /* 2 */
  {
      "_id" : 2.0,
      "student" : "Ryan",
      "homework" : [
          5.0,
          6.0,
          5.0
      ],
      "quiz" : [
          8.0,
          8.0
      ],
      "extraCredit" : 8.0,
      "totalHomework" : 16.0,
      "totalQuiz" : 16.0,
      "totalScore" : 40.0
  }
#+END_EXAMPLE

**** 为嵌入式文档添加字段

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.vehicles.insertMany([
      { _id: 1, type: "car",        specs: { doors: 4, wheels: 4 } },
      { _id: 2, type: "motorcycle", specs: { doors: 0, wheels: 2 } },
      { _id: 3, type: "jet ski" }
  ]);
#+END_SRC

#+RESULTS:
: Mongo-Hacker 0.0.14
: {
:   "acknowledged": true,
:   "insertedIds": [
:     1,
:     2,
:     3
:   ]
: }

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.vehicles.aggregate( [
      {
          $addFields: {
              "specs.fuel_type": "unleaded"
          }
      }
  ] );
#+END_SRC


#+BEGIN_EXAMPLE
  /* 1 */
  {
      "_id" : 1.0,
      "type" : "car",
      "specs" : {
          "doors" : 4.0,
          "wheels" : 4.0,
          "fuel_type" : "unleaded"
      }
  }

  /* 2 */
  {
      "_id" : 2.0,
      "type" : "motorcycle",
      "specs" : {
          "doors" : 0.0,
          "wheels" : 2.0,
          "fuel_type" : "unleaded"
      }
  }

  /* 3 */
  {
      "_id" : 3.0,
      "type" : "jet ski",
      "specs" : {
          "fuel_type" : "unleaded"
      }
  }
#+END_EXAMPLE


**** 覆盖已存在的字段

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.fruit.insertMany([
      { "_id" : 1, "item" : "tangerine",  "type" : "citrus" },
      { "_id" : 2, "item" : "lemon",      "type" : "citrus" },
      { "_id" : 3, "item" : "grapefruit", "type" : "citrus" }
  ]);
#+END_SRC

#+RESULTS:
: Mongo-Hacker 0.0.14
: {
:   "acknowledged": true,
:   "insertedIds": [
:     1,
:     2,
:     3
:   ]
: }

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.fruit.aggregate( [
    {
      $addFields: {
        _id : "$item",
        item: "fruit"
      }
    }
  ] );
#+END_SRC

#+BEGIN_EXAMPLE
  /* 1 */
  {
      "_id" : "tangerine",
      "item" : "fruit",
      "type" : "citrus"
  }

  /* 2 */
  {
      "_id" : "lemon",
      "item" : "fruit",
      "type" : "citrus"
  }

  /* 3 */
  {
      "_id" : "grapefruit",
      "item" : "fruit",
      "type" : "citrus"
  }
#+END_EXAMPLE

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/count/][$count]]

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs
  db.scores.insertMany([
      { "_id" : 1, "subject" : "History", "score" : 88 },
      { "_id" : 2, "subject" : "History", "score" : 92 },
      { "_id" : 3, "subject" : "History", "score" : 97 },
      { "_id" : 4, "subject" : "History", "score" : 71 },
      { "_id" : 5, "subject" : "History", "score" : 79 },
      { "_id" : 6, "subject" : "History", "score" : 83 }
  ]);
#+END_SRC

#+RESULTS:
#+begin_example
Mongo-Hacker 0.0.14
{
  "acknowledged": true,
  "insertedIds": [
    1,
    2,
    3,
    4,
    5,
    6
  ]
}
#+end_example

#+BEGIN_SRC mongo :host localhost :port 27017 :db emacs :exports both
  db.scores.aggregate(
    [
      {
        $match: {
          score: {
            $gt: 80
          }
        }
      },
      {
        $count: "passing_scores"
      }
    ]
  );
#+END_SRC

#+BEGIN_EXAMPLE
  { "passing_scores" : 4 }
#+END_EXAMPLE

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/facet/][$facet]]

#+BEGIN_SRC js
  { "_id" : 1, "title" : "The Pillars of Society", "artist" : "Grosz", "year" : 1926,
    "price" : NumberDecimal("199.99"),
    "tags" : [ "painting", "satire", "Expressionism", "caricature" ] }
  { "_id" : 2, "title" : "Melancholy III", "artist" : "Munch", "year" : 1902,
    "price" : NumberDecimal("280.00"),
    "tags" : [ "woodcut", "Expressionism" ] }
  { "_id" : 3, "title" : "Dancer", "artist" : "Miro", "year" : 1925,
    "price" : NumberDecimal("76.04"),
    "tags" : [ "oil", "Surrealism", "painting" ] }
  { "_id" : 4, "title" : "The Great Wave off Kanagawa", "artist" : "Hokusai",
    "price" : NumberDecimal("167.30"),
    "tags" : [ "woodblock", "ukiyo-e" ] }
  { "_id" : 5, "title" : "The Persistence of Memory", "artist" : "Dali", "year" : 1931,
    "price" : NumberDecimal("483.00"),
    "tags" : [ "Surrealism", "painting", "oil" ] }
  { "_id" : 6, "title" : "Composition VII", "artist" : "Kandinsky", "year" : 1913,
    "price" : NumberDecimal("385.00"),
    "tags" : [ "oil", "painting", "abstract" ] }
  { "_id" : 7, "title" : "The Scream", "artist" : "Munch", "year" : 1893,
    "tags" : [ "Expressionism", "painting", "oil" ] }
  { "_id" : 8, "title" : "Blue Flower", "artist" : "O'Keefe", "year" : 1918,
    "price" : NumberDecimal("118.42"),
    "tags" : [ "abstract", "painting" ] }
#+END_SRC

#+BEGIN_SRC mongo
  db.artwork.aggregate( [
    {
      $facet: {
        "categorizedByTags": [
          { $unwind: "$tags" },
          { $sortByCount: "$tags" }
        ],
        "categorizedByPrice": [
          // Filter out documents without a price e.g., _id: 7
          { $match: { price: { $exists: 1 } } },
          {
            $bucket: {
              groupBy: "$price",
              boundaries: [  0, 150, 200, 300, 400 ],
              default: "Other",
              output: {
                "count": { $sum: 1 },
                "titles": { $push: "$title" }
              }
            }
          }
        ],
        "categorizedByYears(Auto)": [
          {
            $bucketAuto: {
              groupBy: "$year",
              buckets: 4
            }
          }
        ]
      }
    }
  ])
#+END_SRC

#+BEGIN_EXAMPLE
  {
    "categorizedByYears(Auto)" : [
      // First bucket includes the document without a year, e.g., _id: 4
      { "_id" : { "min" : null, "max" : 1902 }, "count" : 2 },
      { "_id" : { "min" : 1902, "max" : 1918 }, "count" : 2 },
      { "_id" : { "min" : 1918, "max" : 1926 }, "count" : 2 },
      { "_id" : { "min" : 1926, "max" : 1931 }, "count" : 2 }
    ],
    "categorizedByPrice" : [
      {
        "_id" : 0,
        "count" : 2,
        "titles" : [
          "Dancer",
          "Blue Flower"
        ]
      },
      {
        "_id" : 150,
        "count" : 2,
        "titles" : [
          "The Pillars of Society",
          "The Great Wave off Kanagawa"
        ]
      },
      {
        "_id" : 200,
        "count" : 1,
        "titles" : [
          "Melancholy III"
        ]
      },
      {
        "_id" : 300,
        "count" : 1,
        "titles" : [
          "Composition VII"
        ]
      },
      {
        // Includes document price outside of bucket boundaries, e.g., _id: 5
        "_id" : "Other",
        "count" : 1,
        "titles" : [
          "The Persistence of Memory"
        ]
      }
    ],
    "categorizedByTags" : [
      { "_id" : "painting", "count" : 6 },
      { "_id" : "oil", "count" : 4 },
      { "_id" : "Expressionism", "count" : 3 },
      { "_id" : "Surrealism", "count" : 2 },
      { "_id" : "abstract", "count" : 2 },
      { "_id" : "woodblock", "count" : 1 },
      { "_id" : "woodcut", "count" : 1 },
      { "_id" : "ukiyo-e", "count" : 1 },
      { "_id" : "satire", "count" : 1 },
      { "_id" : "caricature", "count" : 1 }
    ]
  }
#+END_EXAMPLE


*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/group/][$group]]

Specify an '_id' value of null to calculate accumulated values *for all the input documents as a whole*.

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/limit/][$limit]]

#+BEGIN_SRC mongo
  db.article.aggregate(
      { $limit : 5 }
  );
#+END_SRC


*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/][$lookup]]

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/match/][$match]]

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/project/][$project]]

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/replaceRoot/][$relpaceRoot]]

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/sample/][$sample]]

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/skip/][$skip]]

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/sort/][$sort]]

*** [[https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/][$unwind]]

** [[https://docs.mongodb.com/manual/reference/operator/aggregation/][Pipeline operators]]


* 索引

Indexes are [[https://docs.mongodb.com/manual/indexes/#b-tree][special data structure]] that store a small portion of the collection’s data set in an easy to traverse form.
The index stores the value of a specific field or set of fields, ordered by the value of the field.
The ordering of the index entries supports efficient equality matches and range-based query operations.
In addition, MongoDB can return sorted results by using the ordering in the index.

#+HTML: <img src="https://docs.mongodb.com/manual/_images/index-for-sort.bakedsvg.svg"/>

** 索引类型

*** Single Field

#+HTML: <img src="https://docs.mongodb.com/manual/_images/index-ascending.bakedsvg.svg"/>

#+BEGIN_SRC mongo
  db.records.createIndex( { score: 1 } )
#+END_SRC


*** Compound Index

*MongoDB imposes a limit of 31 fields for any compound index.*


#+HTML: <img src="https://docs.mongodb.com/manual/_images/index-compound-key.bakedsvg.svg"/>

#+BEGIN_SRC mongo
  db.products.createIndex( { "item": 1, "stock": 1 } )
#+END_SRC

*** Multikey Index

MongoDB uses multikey indexes to index the content stored in *arrays*.

MongoDB automatically determines whether to create a multikey index if the indexed field contains an array value;
*you do not need to explicitly specify the multikey type.*

#+HTML: <img src="https://docs.mongodb.com/manual/_images/index-multikey.bakedsvg.svg"/>


*** Geospatial Index

*** Text Indexes

#+BEGIN_SRC mongo
  db.reviews.createIndex( { comments: "text" } )
#+END_SRC

*** Hash Indexes


** 索引属性

*** Unique Indexes

*** Partial Indexes

Only index the documents in a collection that meet a specified filter expression.

Partial indexes offer a *superset* of the functionality of sparse indexes and should be *preferred over sparse indexes*.

*** Sparse Indexes

Ensures that the index *only contain* entries for documents that have the indexed field.
The index skips documents that do not have the indexed field.

The index is *sparse* because it does not include all documents of a collection.


*** TTL Indexes

To create a TTL index, use the db.collection.createIndex() method with the expireAfterSeconds option on a field whose value is *either a date or an array that contains date values.*

* Replica Set

Replication can provide increased read capacity as *clients can send read operations to different servers.*

A replica set contains several data bearing nodes and optionally one arbiter node.
Of the data bearing nodes, *one and only one member is deemed the primary node, while the other nodes are deemed secondary nodes.*

MongoDB applies write operations on the primary and then records the operations on the primary’s oplog. Secondary members *replicate this log* and apply the operations to their data sets.

#+HTML: <img src="https://docs.mongodb.com/manual/_images/replica-set-read-write-operations-primary.bakedsvg.svg"/>

#+HTML: <img src="https://docs.mongodb.com/manual/_images/replica-set-primary-with-two-secondaries.bakedsvg.svg"/>


** Automatic Failover

The replica set *cannot process write operations* until the election completes successfully.

The replica set can *continue to serve read queries* if such queries are configured to run on secondaries while the primary is offline.

#+HTML: <img src="https://docs.mongodb.com/manual/_images/replica-set-trigger-election.bakedsvg.svg"/>

* Sharding

MongoDB supports horizontal scaling through sharding.

MongoDB sharded cluster consists of the following components:

- shard: Each shard contains a subset of the sharded data. Each shard can be deployed as a replica set.
- mongos: The mongos acts as a query router, providing an interface between client applications and the sharded cluster.
- config servers: Config servers store metadata and configuration settings for the cluster.

#+HTML: <img src="https://docs.mongodb.com/manual/_images/sharded-cluster-production-architecture.bakedsvg.svg"/>

You must connect to a mongos router to interact with any collection in the sharded cluster.
This includes sharded and unsharded collections.
*Clients should never connect to a single shard in order to perform read or write operations.*

#+HTML: <img src="https://docs.mongodb.com/manual/_images/sharded-cluster-mixed.bakedsvg.svg"/>