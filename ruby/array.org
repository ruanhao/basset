#+Title: Array
#+OPTIONS: ^:nil


* Assign
#+BEGIN_SRC ruby
a     = [1, 3, 5, 7, 9]    # -> [1, 3, 5, 7, 9]
a[1]  = 'bat'              # -> [1, "bat", 5, 7, 9]
a[-3] = 'cat'              # -> [1, "bat", "cat", 7, 9]
a[3]  = [9, 8]             # -> [1, "bat", "cat", [9, 8], 9]
a[6]  = 99                 # -> [1, "bat", "cat", [9, 8], 9, nil, 99]
#+END_SRC

#+BEGIN_SRC ruby
a       = [1, 3, 5, 7, 9]  # -> [1, 3, 5, 7, 9]
a[2, 2] = 'cat'            # -> [1, 3, "cat", 9]
a[2, 0] = 'dog'            # -> [1, 3, "dog", "cat", 9]
a[1, 1] = [9, 8, 7]        # -> [1, 9, 8, 7, "dog", "cat", 9]
a[0..3] = []               # -> ["dog", "cat", 9]
a[5..6] = 99, 98           # -> ["dog", "cat", 9, nil, nil, 99, 98]
#+END_SRC

#+BEGIN_SRC ruby
## if the rvalue is the only thing on the right-hand side, the array will be expanded automatically
a = [1, 2, 3, 4]
b,  c = a		## b == 1,  c == 2
b, *c = a		## b == 1,  c == [2, 3, 4]
b,  c = 99,  a		## b == 99, c == [1, 2, 3, 4]
b, *c = 99,  a		## b == 99, c == [[1, 2, 3, 4]]
b,  c = 99, *a		## b == 99, c == 1
b, *c = 99, *a		## b == 99, c == [1, 2, 3, 4]
#+END_SRC

#+BEGIN_SRC ruby
## The left-hand side of an assignment may contain a parenthesized list of terms.
## Ruby treats these terms as if they were a nested assignment statement.
## It extracts out the corresponding rvalue, assigning it to the parenthesized terms, before continuing with the higher-level assignment.
b, (c, d), e = 1,2,3,4        b == 1, c == 2, d == nil,    e == 3
b, (c, d), e = [1,2,3,4]      b == 1, c == 2, d == nil,    e == 3
b, (c, d), e = 1,[2,3],4      b == 1, c == 2, d == 3,      e == 4
b, (c, d), e = 1,[2,3,4],5    b == 1, c == 2, d == 3,      e == 5
b, (c,*d), e = 1,[2,3,4],5    b == 1, c == 2, d == [3, 4], e == 5
#+END_SRC

* Functions
** delete_if
 #+BEGIN_SRC ruby
[1,2,3,4,5,6,7].delete_if{|v| v < 4 }
#+END_SRC