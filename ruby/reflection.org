#+Title: Class
#+OPTIONS: ^:nil

* Iterate on all objects
#+BEGIN_SRC ruby
  ObjectSpace.each_object(DemoClass) do |obj|
    puts obj
  end
#+END_SRC


* Look into class
#+BEGIN_SRC ruby
  DemoClass.private_instance_methods(false)
  DemoClass.protected_instance_methods(false)
  DemoClass.public_instance_methods(false)
  DemoClass.singleton_methods(false)
  DemoClass.class_variables
  DemoClass.constants - DemoClass.superclass.constants ## Module#constants returns all available constants including superclass's

  DemoClass.new.instance_variables
#+END_SRC

* Call methods dynamically
#+BEGIN_SRC ruby
  "Jon Coltrane".send(:length)
  "Miles Davis".send("sub", /iles/, '.')
#+END_SRC

#+BEGIN_SRC ruby
  trane = "Jon Coltrane".method(:length)
  miles = "Miles Davis"

  trane.call
  miles.call(/iles/, '.')
#+END_SRC

#+BEGIN_SRC ruby
  def double(a)
    a * 2
  end

  m_obj = method(:double)
  [1, 3, 5, 7].collect &m_obj ## -> [2, 6, 10, 14]
#+END_SRC

#+BEGIN_SRC ruby
  unbound_length = String.instance_method(:length)
  class String
    def length
      99
    end
  end

  str = "cat"
  str.length ## 99

  bound_length = unbound_length.bind(str)
  bound_length.call ## 3 (unbound_length points to origin String#length)
#+END_SRC

#+BEGIN_SRC ruby
  ## eval, class_eval, module_eval and instance_eval

  def get_a_binding
    val = 123
    binding
  end

  val = "cat"

  the_binding = get_a_binding
  eval("val", the_binding)    ## 123
  eval("val")                 ## "cat"
#+END_SRC

* Runtime callbacks

|-------------------------------------------+-----------------------------------|
| Events                                    | Callback                          |
|-------------------------------------------+-----------------------------------|
| Add instance method                       | Module#method_added               |
| Delete instance method                    | Module#method_removed             |
| Cancel the definition of instance method  | Module#method_undefined           |
| Add singleton method                      | Kernel.singleton_method_added     |
| Delete singleton method                   | Kernel.singleton_method_removed   |
| Cancel the definition of singleton method | Kernel.singleton_method_undefined |
| Instancize a class                        | Class#inherited                   |
| Mixin a module                            | Module#extend_object              |
