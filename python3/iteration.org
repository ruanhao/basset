#+TITLE:     Iterator
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

* 一，基本知识

** 1.1，Iterable

可以直接作用于 =for= 循环的对象统称为可迭代对象：Iterable

#+BEGIN_SRC python
  from collections import Iterable
  isinstance([], Iterable)                      # True
  isinstance({}, Iterable)                      # True
  isinstance('abc', Iterable)                   # True
  isinstance((x for x in range(10)), Iterable)  # True
  isinstance(100, Iterable)                     # False
#+END_SRC

** 1.2，Iterator

可以被 =next()= 函数调用并不断返回下一个值的对象称为迭代器：Iterator

#+BEGIN_SRC python
  from collections import Iterator
  isinstance((x for x in range(10)), Iterator)  # True
  isinstance([], Iterator)                      # False
  isinstance({}, Iterator)                      # False
  isinstance('abc', Iterator)                   # False
#+END_SRC

** 1.3，为什么 list，dict，str 等数据类型不是 Iterator

Python 的 Iterator 对象表示的是一个数据流，Iterator 对象可以被 next() 函数调用并不断返回下一个数据，直到没有数据时抛出 StopIteration 异常。\\
可以把这个数据流看做是一个有序序列，但是无法提前知道序列的长度（list，dict 和 str 都是有明确长度的），只能不断通过 next() 函数实现按需计算下一个数据，所以 Iterator 的计算是惰性的，只有在需要返回下一个数据时它才会计算。

生成器既是 Iterable 对象又是 Iterator 对象，但list，dict，str 虽然是 Iterable，却不是 Iterator。\\
把 list，dict，str 等 Iterable 变成 Iterator 可以使用 =iter()= 函数：

#+BEGIN_SRC python
  isinstance(iter([]), Iterator)     # True
  isinstance(iter('abc'), Iterator)  # True
#+END_SRC

** 1.4，for 的本质

for 循环本质上就是通过不断调用 next() 函数实现的：

#+BEGIN_SRC python
  for x in [1, 2, 3, 4, 5]:
      pass
#+END_SRC

等价于：

#+BEGIN_SRC python
  it = iter([1, 2, 3, 4, 5])      # 首先获得 Iterator 对象：

  while True:
      try:
          x = next(it)
      except StopIteration:
          break
#+END_SRC
