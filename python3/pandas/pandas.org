#+TITLE:     Pandas
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall


* 1, 基本原理

** 1.1, Series (collections of values)


The Series object is a core data structure that pandas uses to represent rows and columns.

A Series is a labelled collection of values similar to the NumPy vector. \\
The main advantage of Series objects is the ability to utilize non-integer labels. (NumPy arrays can only utilize integer labels for indexing.)

Pandas utilizes this feature to provide more context when returning a row or a column from a dataframe. \\
For example, when you select a row from a dataframe, instead of just returning the values in that row as a list, pandas returns a Series object that contains the column labels as well as the corresponding values:

[[images/series.png][series overview]]

#+BEGIN_EXAMPLE
  Series objects use NumPy arrays for fast computation, but add valuable features to them for analyzing data.
  While NumPy arrays use an integer index, for example, Series objects can use other index types, such as a string index.
  Series objects also allow for mixed data types, and use the `NaN` Python value for handling missing values.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  With both NumPy arrays and Series objects, we can pass integer indexes into bracket notation to slice and select values.
  With Series objects, however, we can also specify custom indexes.
#+END_EXAMPLE


A Series object can hold many data types, including:

- float - For float values
- int - For integer values
- bool - For Boolean values
- datetime64[ns] - For date & time, without time zone
- datetime64[ns, tz] - For date & time, with time zone
- timedelta[ns] - For representing differences in dates & times (seconds, minutes, etc.)
- category - For categorical values
- object - For string values



** 1.2, DataFrame (collections of Series)

[[images/df.png][DataFrame Structure]]

We use `bracket notation` to select a slice (continuous sequence) of rows, just as we would for a list.\\
To select an individual row, however, we'll need to use the =iloc[]= method. This method accepts the following objects for selection:

- An integer
- A list of integers
- A slice object
- A Boolean array

When selecting an individual row, pandas will return a *Series* object. \\
When selecting multiple rows, it will return a subset of the original dataframe as a new *dataframe*.


** 1.3, Panels (collections of DataFrame)


** 1.4, dtype

Pandas borrows from the NumPy type system and contains the following dtypes:

- object - for representing string values.
- int - for representing integer values.
- float - for representing float values.
- datetime - for representing time values.
- bool - for representing Boolean values.

When reading a file into a dataframe, pandas analyzes the values and infers each column's types. \\
To access the types for each column, use the =DataFrame.dtypes= attribute to return a Series containing each column name and its corresponding type.
