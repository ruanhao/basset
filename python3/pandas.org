#+TITLE:     Pandas
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS:   h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+STARTUP:   showall
#+TOC:       headlines 4
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/css/style.css" rel="stylesheet" type="text/css" />
#+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>

#+BEGIN_SRC ipython :session :exports none
  #! /usr/bin/env python3
  # -*- coding: utf-8 -*-


  import pandas as pd
  import numpy as np
  import matplotlib.pyplot as plt
  import subprocess
  from PIL import Image

  def show_dataframe(df):
      global path
      df.to_html("/tmp/df.html")
      subprocess.call('webkit2png -F --transparent /tmp/df.html -D /tmp -o df', shell=True)
      image = Image.open('/tmp/df-full.png')
      box = image.getbbox()
      cropped = image.crop(box)
      w = cropped.size[0]
      h = cropped.size[1]
      ratio = 0.618
      cropped.thumbnail((int(w*ratio), int(h*ratio)), Image.ANTIALIAS)
      cropped.save(path)
      cropped.close()
      image.close()


  def log(title0, value):
      title1 = ' ' + title0 + ' '
      print("{}\n{}".format(title1.center(80, '='), value))
#+END_SRC



* 创建

** 使用字典创建

key 为 DataFrame 的列；value 为对应列下的值

#+BEGIN_SRC ipython :session :exports both :results output
  df = pd.DataFrame({
                    'A': 1,
                    'B': pd.Timestamp('20160301'),
                    'C': range(4),
                    'D': np.arange(5, 9),
                    'E': 'text',
                    'F': ['AA', 'BB', 'CC', 'DD']})
  log("df", df)
#+END_SRC


** 指定行列索引创建

#+BEGIN_SRC ipython :session :results output :exports both
  dates = pd.date_range('20160301', periods=6)
  log("dates", dates)

  df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))
  log("df", df)

#+END_SRC


* 查看数据

** 维度

#+BEGIN_SRC ipython :session :results output :exports both
  log("df.shape", df.shape)
#+END_SRC

DataFrame 对象可以理解为二维数组

** 行索引信息

#+BEGIN_SRC ipython :session :results output :exports both
  log("df.index", df.index)
#+END_SRC


** 列索引信息

#+BEGIN_SRC ipython :session :results output :exports both
  log("df.columns", df.columns)
#+END_SRC


** 底层数据

#+BEGIN_SRC ipython :session :results output :exports both
  log("df.values", df.values)
  log("type(df.values)", type(df.values))
#+END_SRC

*本质上 DataFrame 是对 Numpy array 的封装*

** 列类型

#+BEGIN_SRC ipython :session :results output :exports both
log("df.dtypes", df.dtypes)
#+END_SRC


** head

默认返回前五行

#+BEGIN_SRC ipython :session :exports both :results output
  log("df.head(3)", df.head(3))
#+END_SRC


** tail

默认返回最后五行

#+BEGIN_SRC ipython :session :exports both :results output
  log("df.tail(3)", df.tail(3))
#+END_SRC



** 统计信息

#+BEGIN_SRC ipython :session :exports both :results output
  log("df.describe()", df.describe())
#+END_SRC


* 排序

** 按列索引排序

#+BEGIN_SRC ipython :session :exports both :results output
  log("df.sort_index(axis=1, ascending=False)", df.sort_index(axis=1, ascending=False))
#+END_SRC

** 按列数据排序

#+BEGIN_SRC ipython :session :exports both :results output
  log("df.sort_values(by='C')", df.sort_values(by='C'))
#+END_SRC


* 数据选择

使用基于标签的 =loc= 函数选择数据效率较高。

*DataFrame 中每一行 / 列是由一个 Series 对象组成的* 。

** 列数据（Series 类型对象）

#+BEGIN_SRC ipython :session :results output :exports both
  log("df['A']", df['A'])         # 等效于 df.A
  log("df.iloc[0]", df.iloc[0])

#+END_SRC

** 列数据（DataFrame 类型对象）

#+BEGIN_SRC ipython :session :exports both :results output
  log("df.loc[:, ['A', 'B']]", df.loc[:, ['A', 'B']])
  log("df.iloc[:, 1:2]", df.iloc[:, 1:2])
#+END_SRC


** 行数据（Series 类型对象）

#+BEGIN_SRC ipython :session :results output :exports both
  log("df.loc['20160301']", df.loc['20160301'])
  log("df.iloc[0]", df.iloc[0])

#+END_SRC

** 行数据（DataFrame 类型对象）

#+BEGIN_SRC ipython :session :exports both :results output
  log("df[2:4]", df[2:4])
  log("df['20160302':'20160305']", df['20160302':'20160305'])
  log("df.iloc[1:3]", df.iloc[1:3])

#+END_SRC


** 选择行与列

#+BEGIN_SRC ipython :session :exports both :results output
  log("df.loc['20160301':'20160305', ['A', 'B']]", df.loc['20160301':'20160305', ['A', 'B']])
  log("df.iloc[1:3, 2:4]", df.iloc[1:3, 2:4])
#+END_SRC


** 选择指定坐标

#+BEGIN_SRC ipython :session :results output :exports both
  log("df.loc['2016-03-01', 'A']", df.loc['2016-03-01', 'A'])
  log("df.at[pd.Timestamp('2016-03-01'), 'A']", df.at[pd.Timestamp('2016-03-01'), 'A'])
  # df.at['2016-03-01', 'A'] will raise error
  log("df.iloc[1, 1]", df.iloc[1, 1])
  log("df.iat[1, 1]", df.iat[1, 1])
#+END_SRC

** 布尔选择

#+BEGIN_SRC ipython :session :exports both :results output
  log("df[df.A < 0]", df[df.A < 0])
  log("df[df > 0]", df[df > 0])
#+END_SRC


* 数据修改

** 增加列

#+BEGIN_SRC ipython :session :exports both :results output
  s = pd.Series(np.arange(6), index=pd.date_range('20160301', periods=6))
  df['E'] = s
  log("df", df)
#+END_SRC


** 修改列

#+BEGIN_SRC ipython :session :exports both :results output
  df.loc[:, 'A'] = np.arange(10, 16)
  log("df", df)
#+END_SRC


** 修改指定坐标

#+BEGIN_SRC ipython :session :exports both :results output
  df.loc['20160301', 'A'] = 0.2
  df.at[pd.Timestamp('20160301'), 'A'] = 0.4
  df.iat[0, 0] = 0.6
  log("df", df)
#+END_SRC


** 整体赋值

#+BEGIN_SRC ipython :session :exports both :results output
  df2 = df.loc[:, ['B', 'C']].copy()
  df2[df2 > 0] = -df2
  log("df2", df2)
#+END_SRC
