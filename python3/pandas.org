#+TITLE:     Pandas
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS:   h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+STARTUP:   showall
#+TOC:       headlines 4
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/solarized-light/style.css" rel="stylesheet" type="text/css" />
#+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>

#+BEGIN_SRC ipython :session :exports none
  #! /usr/bin/env python3
  # -*- coding: utf-8 -*-


  import pandas as pd
  import numpy as np
  import matplotlib.pyplot as plt
  import subprocess
  from PIL import Image

  def run_script(script):
      """Returns (stdout, stderr), raises error on non-zero return code"""
      proc = subprocess.Popen(['bash', '-c', script],
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                              stdin=subprocess.PIPE)
      stdout, stderr = proc.communicate()
      if proc.returncode:
          raise Exception('exit code %s' % proc.returncode)
      return stdout, stderr

  def show_dataframe(df):
      global path
      df.to_html("/tmp/df.html")
      run_script('webkit2png -F --transparent /tmp/df.html -D /tmp -o df')
      # try:
      #     subprocess.call('webkit2png -F --transparent /tmp/df.html -D /tmp -o df', shell=True, timeout=5)
      # except:
      #     pass
      image = Image.open('/tmp/df-full.png')
      box = image.getbbox()
      cropped = image.crop(box)
      image.close()
      w = cropped.size[0]
      h = cropped.size[1]
      ratio = 0.618
      cropped.thumbnail((int(w*ratio), int(h*ratio)), Image.ANTIALIAS)
      cropped.save(path)
      cropped.close()

  def plot():
      global path
      plt.savefig(path)
      plt.clf()

  def show_fig(o):
      global path
      plt.clf()
      o.plot()
      plt.savefig(path)


  def log(title0, value):
      title1 = ' ' + title0 + ' '
      print("{}\n{}".format(title1.center(80, '='), value))
#+END_SRC






* 函数应用

** pipe

- =df.pipe(df_to_df_func) -> DataFrame=
- =df.pipe(df_to_series_func) -> Series=
- =df.pipe(df_to_value_func) -> Value=


** 数据分类(astype('category'))

#+BEGIN_SRC ipython :session :var path="img/fig37020v8b.png"
  df = pd.DataFrame({"id":[1,2,3,4,5,6], "raw_grade":['a', 'b', 'b', 'a', 'a', 'e']})
  df["grade"] = df["raw_grade"].astype("category")
  show_dataframe(df)
#+END_SRC

#+NAME: img/fig37020v8b.png
#+CAPTION: 示例数据
[[file:img/fig37020v8b.png]]


#+BEGIN_SRC ipython :session :exports both :results output
  log("df.grade", df.grade)
  log("df.grade.cat.categories", df.grade.cat.categories)
#+END_SRC

#+BEGIN_SRC ipython :session :var path="img/fig37020JRo.png"
  df.grade.cat.categories = ['very good', 'good', 'bad']
  sort_result = df.sort_values(by='grade', ascending=False)
  show_dataframe(sort_result)
#+END_SRC

#+NAME: img/fig37020JRo.png
#+CAPTION: 以 raw_grade 列为排序标准
[[file:img/fig37020JRo.png]]





* 分组与聚合

#+BEGIN_SRC ipython :session :var path="img/fig75428IMv.png"
  df = pd.DataFrame({'key1': ['a', 'a', 'b', 'b', 'a'],
                     'key2': ['one', 'two', 'one', 'two', 'one'],
                     'data1': np.random.randint(1, 10, 5),
                     'data2': np.random.randint(1, 10, 5)})

  show_dataframe(df)
#+END_SRC

[[file:img/fig75428IMv.png]]




** 数据聚合


#+NAME: filter
#+CAPTION: filter 原理
[[file:img/pandas_filter.png]]


* 时间序列


** 固定时刻(pd.Timestamp)

*** 日期范围(data_range)

**** 小时

#+BEGIN_SRC ipython
  pd.date_range(start='20160320', periods=10, freq='4H')
#+END_SRC


**** 日

#+BEGIN_SRC ipython
  pd.date_range('20160320', '20160331')
  pd.date_range(start='20160320', periods=10)
#+END_SRC

**** 星期

#+BEGIN_SRC ipython
  pd.date_range(start='20160320', periods=10, freq='W')
#+END_SRC

**** 月

#+BEGIN_SRC ipython
  pd.date_range(start='20160320', periods=10, freq='M')
#+END_SRC


**** 每个月最后一个工作日组成的索引


#+BEGIN_SRC ipython
  pd.date_range(start='20160320', periods=10, freq='BM')
#+END_SRC


**** 规则化时间戳

#+BEGIN_SRC ipython
  pd.date_range(start='2016-03-20 16:23:32', periods=10, normalize=True)
#+END_SRC


** 固定时期(pd.Period)

=pd.Period= 表示时期，比如几日，月或几个月等。比如用来统计每个月的销售额，就可以用时期作为单位。


*** 运算

#+BEGIN_SRC ipython :session :exports both :results output
  p1 = pd.Period(2010)
  p2 = p1 + 2
  p3 = pd.Period(2016, freq='M')
  log("p1", p1)
  log("p2", p2)
  log("p3", p3)
  log("p2 - p1", p2 - p1)
  log("p3 + 3", p3 + 3)

#+END_SRC



*** 时期范围

**** 月

#+BEGIN_SRC ipython
  pd.period_range(start='2016-01', periods=12, freq='M')
  pd.period_range(start='2016-01', end='2016-10', freq='M')
#+END_SRC

**** 季度

#+BEGIN_SRC ipython
  pd.period_range(start='2016Q1', periods=10, freq='Q')
#+END_SRC

*** 频率转换

- A-DEC :: 以 12 月份作为结束的年时期
- A-NOV :: 以 11 月份作为结束的年时期
- Q-DEC :: 以 12 月份作为结束的季度时期

**** 年转月

#+BEGIN_SRC ipython :session :exports both :results output
  p = pd.Period('2016', freq='A-DEC')
  log("p.asfreq('M', how='start')", p.asfreq('M', how='start'))
  log("p.asfreq('M', how='end')", p.asfreq('M', how='end'))
#+END_SRC

**** 指定年的结束月份

#+BEGIN_SRC ipython :session :exports both :results output
  p = pd.Period('2016-04', freq='M')
  # 以年为周期，以一年中的 3 月份作为年的结束（财年）
  log("p.asfreq('A-MAR')", p.asfreq('A-MAR'))
#+END_SRC


#+BEGIN_SRC ipython :session :exports both :results output
  p = pd.Period('2016Q4', 'Q-JAN')

  # 以 1 月份结束的财年中，2016Q4 的时期是指 2015-11-1 到 2016-1-31
  log("p.asfreq('D', how='start')", p.asfreq('D', how='start'))
  log("p.asfreq('D', how='end')", p.asfreq('D', how='end'))

  # 获取该季度倒数第二个工作日下午4点的时间戳
  p4pm = (p.asfreq('B', how='end') - 1).asfreq('T', 'start') + 16 * 60
  log("p4pm", p4pm)
  log("p4pm.to_timestamp()", p4pm.to_timestamp())
#+END_SRC


** Timestamp 和 Period 相互转换

#+BEGIN_SRC ipython :session :exports both :results output
  ts = pd.Series(np.random.randn(5),
                 index = pd.date_range('2016-01-01',
                                       periods=5,
                                       freq='M'))
  log("ts", ts)
  log("ts.to_period()", ts.to_period())
#+END_SRC

#+BEGIN_SRC ipython :session :exports both :results output
  ts = pd.Series(np.random.randn(5),
                 index = pd.date_range('2016-12-29', periods=5, freq='D'))
  log("ts", ts)
  pts = ts.to_period(freq='M')
  log("pts", pts)
  log("pts.groupby(level=0).sum()", pts.groupby(level=0).sum())
  log("pts.to_timestamp(how='end')", pts.to_timestamp(how='end'))
#+END_SRC


** 重采样

*** 降采样（高频率 -> 低频率）

如 5 分钟股票交易数据转换为日交易数据

#+BEGIN_SRC ipython :session :exports both :results output
  ts = pd.Series(np.random.randint(0, 50, 60),
                 index=pd.date_range('2016-04-25 09:30', periods=60, freq='T'))
  log("ts.head(10)", ts.head(10))
#+END_SRC

**** 起始时间为行索引

#+BEGIN_SRC ipython :session :exports both :results output
  log("ts.resample('5min', how='sum')", ts.resample('5min', how='sum'))
#+END_SRC

**** 结束时间为行索引

#+BEGIN_SRC ipython :session :exports both :results output
  log("ts.resample('5min', how='sum', label='right')",
      ts.resample('5min', how='sum', label='right'))
#+END_SRC


**** OHLC 重采样

金融数据专用：Open/High/Low/Close

#+BEGIN_SRC ipython :session :var path="img/fig37020WwK.png"
  show_dataframe(ts.resample('5min', how='ohlc'))
#+END_SRC

#+NAME: img/fig37020WwK.png
#+CAPTION: ohlc
[[file:img/fig37020WwK.png]]


*** 升采样/插值（低频率 -> 高频率）

#+BEGIN_SRC ipython :session :var path="img/fig37020wEX.png"
  # 以周为单位，每周五采样
  df = pd.DataFrame(np.random.randint(1, 50, 2),
                    index=pd.date_range('2016-04-22', periods=2, freq='W-FRI'))
  show_dataframe(df)
#+END_SRC

#+NAME: img/fig37020wEX.png
#+CAPTION: 示例数据
[[file:img/fig37020wEX.png]]

#+BEGIN_SRC ipython :session :var path="img/fig37020KZj.png"
  show_dataframe(df.resample('D'))
#+END_SRC

#+NAME: img/fig37020KZj.png
#+CAPTION: 周->天
[[file:img/fig37020KZj.png]]


#+BEGIN_SRC ipython :session :var path="img/fig37020ktv.png"
  show_dataframe(df.resample('D', fill_method='ffill', limit=3))
#+END_SRC

#+NAME: img/fig37020ktv.png
#+CAPTION: 向前插值
[[file:img/fig37020ktv.png]]


#+BEGIN_SRC ipython :session :var path="img/fig37020jBF.png"
  show_dataframe(df.resample('W-MON', fill_method='ffill'))
#+END_SRC

#+NAME: img/fig37020jBF.png
#+CAPTION: 以周为单位，每周一采样
[[file:img/fig37020jBF.png]]



** 时期重采样

#+BEGIN_SRC ipython :session :var path="img/fig370209VR.png"
  df = pd.DataFrame(np.random.randint(2, 30, (24, 4)),
                    index=pd.period_range('2015-01', '2016-12', freq='M'),
                    columns=list('ABCD'))
  show_dataframe(df)
#+END_SRC

#+NAME: img/fig370209VR.png
#+CAPTION: 示例数据
[[file:img/fig370209VR.png]]

*** 降采样

#+BEGIN_SRC ipython :session :var path="img/fig37020Xqd.png"
  adf = df.resample('A-DEC', how='mean')
  show_dataframe(adf)
#+END_SRC

#+NAME: img/fig37020Xqd.png
#+CAPTION: 年重采样 (a)
[[file:img/fig37020Xqd.png]]


#+BEGIN_SRC ipython :session :var path="img/fig37020x-p.png"
  show_dataframe(df.resample('A-MAY', how='mean'))
#+END_SRC

#+NAME: img/fig37020x-p.png
#+CAPTION: 年重采样 (b)
[[file:img/fig37020x-p.png]]


*** 升采样

#+BEGIN_SRC ipython :session :var path="img/fig37020LT2.png"
  show_dataframe(adf.resample('Q-DEC'))
#+END_SRC

#+NAME: img/fig37020LT2.png
#+CAPTION: 默认升采样行为
[[file:img/fig37020LT2.png]]

#+BEGIN_SRC ipython :session :var path="img/fig37020KnL.png"
  show_dataframe(adf.resample('Q-DEC', fill_method='ffill'))
#+END_SRC

#+NAME: img/fig37020KnL.png
#+CAPTION: 向前插值
[[file:img/fig37020KnL.png]]


** 从文件中读取日期序列

#+BEGIN_SRC ipython
  pd.read_csv('xxx.csv', index_col='xxx', parse_dates=True)
#+END_SRC

Possible values of parse_dates:
- [0, 2]: Parse columns 0 and 2 as separate dates
- [ [0, 2] ]: Group columns 0 and 2 and parse as single date
- {'Date': [0, 2]}: Group columns 0 and 2, parse as single date in a column named Date.

*** 自定义时间日期解析函数

#+BEGIN_SRC ipython
  def date_parser(s):
      s = '2016/' + s
      d = datetime.strptime(s, '%Y/%m/%d')
      return d

  pd.read_csv('xxx.csv', index_col='xxx',
              parse_dates=True, date_parser=date_parser)
#+END_SRC


* 可视化

** 线形图

#+BEGIN_SRC ipython :session :var path="img/fig75428HE0.png"
  ts = pd.Series(np.random.randn(1000), index=pd.date_range('20000101', periods=1000))
  ts = ts.cumsum()
  ts.plot()
  plot()
#+END_SRC

#+NAME: img/fig75428HE0.png
#+CAPTION: 单个线形图
[[file:img/fig75428HE0.png]]

#+BEGIN_SRC ipython :session :var path="img/fig37020k7X.png"
  ts.plot(title='cumsum', style='r-', ylim=[-30, 50], figsize=(4, 3));
  plot()
#+END_SRC

#+NAME: img/fig37020k7X.png
#+CAPTION: 自定义线形图
[[file:img/fig37020k7X.png]]


#+BEGIN_SRC ipython :session :var path="img/fig47069XEp.png"
  df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list('ABCD'))
  df = df.cumsum()
  df.plot()
  plot()
#+END_SRC

#+NAME: img/fig47069XEp.png
#+CAPTION: 多个线形图组合
[[file:img/fig47069XEp.png]]


#+BEGIN_SRC ipython :session :var path="img/fig47069xY1.png"
  df.plot(title='DataFrame cumsum',
          figsize=(6, 12),
          subplots=True, sharex=True, sharey=True)
  plot()
#+END_SRC

#+NAME: img/fig47069xY1.png
#+CAPTION: subplot
[[file:img/fig47069xY1.png]]

#+BEGIN_SRC ipython :session :var path="img/fig47069wsK.png"
  df['I'] = np.arange(len(df))
  df.plot(x='I', y=['A', 'C'])
  plot()
#+END_SRC

#+NAME: img/fig47069wsK.png
#+CAPTION: 自定义坐标
[[file:img/fig47069wsK.png]]


** 柱状图

#+BEGIN_SRC ipython :session :var path="img/fig6529276K.png"
  df = pd.DataFrame(np.random.rand(10, 4), columns=['A', 'B', 'C', 'D'])
  show_dataframe(df)
#+END_SRC

#+NAME: img/fig6529276K.png
#+CAPTION: 示例数据
[[file:img/fig6529276K.png]]

#+BEGIN_SRC ipython :session :var path="img/fig65292iSp.png"
  df.iloc[1].plot(kind='bar')
  plot()
#+END_SRC

#+NAME: img/fig65292iSp.png
#+CAPTION: 单个柱状图
[[file:img/fig65292iSp.png]]


#+BEGIN_SRC ipython :session :var path="img/fig652928m1.png"
  df.plot.bar()
  plot()
#+END_SRC

#+NAME: img/fig652928m1.png
#+CAPTION: 多个柱状图组合
[[file:img/fig652928m1.png]]

#+BEGIN_SRC ipython :session :var path="img/fig65292VPX.png"
  df.plot.bar(stacked=True)
  plot()
#+END_SRC

#+NAME: img/fig65292VPX.png
#+CAPTION: stacked
[[file:img/fig65292VPX.png]]


#+BEGIN_SRC ipython :session :var path="img/fig65292vjj.png"
  df.plot.barh(stacked=True)
  plot()
#+END_SRC

#+NAME: img/fig65292vjj.png
#+CAPTION: 水平柱状图
[[file:img/fig65292vjj.png]]


** 直方图

直方图是一种对值频率进行离散化的柱状图。
数据点被分到离散的，间隔均匀的区间中，绘制各个区间中数据点的数据。

#+BEGIN_SRC ipython :session :var path="img/fig65292J4v.png"
  df = pd.DataFrame({'a': np.random.randn(1000) + 1, 'b': np.random.randn(1000),
                     'c': np.random.randn(1000) - 1}, columns=['a', 'b', 'c'])
  show_dataframe(df.head())
#+END_SRC

#+NAME: img/fig65292J4v.png
#+CAPTION: 示例数据
[[file:img/fig65292J4v.png]]


#+BEGIN_SRC ipython :session :var path="img/fig65292IMF.png"
  df['a'].plot.hist(bins=20)
  plot()
#+END_SRC

#+NAME: img/fig65292IMF.png
#+CAPTION: 单个直方图
[[file:img/fig65292IMF.png]]

#+BEGIN_SRC ipython :session :var path="img/fig65292igR.png"
  df.plot.hist(subplots=True, sharex=True, sharey=True, bins=20)
  plot()
#+END_SRC

#+NAME: img/fig65292igR.png
#+CAPTION: subplot
[[file:img/fig65292igR.png]]

#+BEGIN_SRC ipython :session :var path="img/fig6529280d.png"
  df.plot.hist(alpha=0.5)
  plot()
#+END_SRC

#+NAME: img/fig6529280d.png
#+CAPTION: 透明度
[[file:img/fig6529280d.png]]


#+BEGIN_SRC ipython :session :var path="img/fig65292WJq.png"
  df.plot.hist(stacked=True, bins=20, grid=True)
  plot()
#+END_SRC

#+NAME: img/fig65292WJq.png
#+CAPTION: stack
[[file:img/fig65292WJq.png]]

*** 密度图

正态分布（高斯分布）就是一种自然界中广泛存在密度图。

#+BEGIN_SRC ipython :session :var path="img/fig92800jqp.png"
  df['a'].plot.kde()
  plot()
#+END_SRC

#+NAME: img/fig92800jqp.png
#+CAPTION: 单个密度图
[[file:img/fig92800jqp.png]]


#+BEGIN_SRC ipython :session :var path="img/fig928009-1.png"
  df.plot.kde()
  plot()
#+END_SRC

#+NAME: img/fig928009-1.png
#+CAPTION: 多个密度图组合
[[file:img/fig928009-1.png]]


*** 带密度估计的直方图


#+BEGIN_SRC ipython :session :exports both :results output
  n1 = np.random.normal(0, 1, size=200) # N(0, 1)
  n2 = np.random.normal(10, 2, size=200) # N(10, 4)
  s = pd.Series(np.concatenate([n1, n2]))
#+END_SRC

#+BEGIN_SRC ipython :session :var path="img/fig928008SL.png"
  s.plot.hist(bins=100, alpha=0.5, normed=True)
  s.plot.kde(style='r-')
  plot()
#+END_SRC

#+NAME: img/fig928008SL.png
#+CAPTION: 密度估计&直方图
[[file:img/fig928008SL.png]]


** 散布图

散布图是把所有的点画在同一个坐标轴上的图像。是观察两个一维数据之间关系的有效的手段。

#+BEGIN_SRC ipython :session :var path="img/fig92800w7j.png"
  df = pd.DataFrame({'a': np.concatenate([np.random.normal(0, 1, 200),
                                          np.random.normal(6, 1, 200)]),
                     'b': np.concatenate([np.random.normal(10, 2, 200),
                                          np.random.normal(0, 2, 200)]),
                     'c': np.concatenate([np.random.normal(10, 4, 200),
                                          np.random.normal(0, 4, 200)])})
  df.plot.scatter(x='a', y='b')
  plot()
#+END_SRC

#+NAME: img/fig92800w7j.png
#+CAPTION: 散布图
[[file:img/fig92800w7j.png]]


** 饼图

#+BEGIN_SRC ipython :session :var path="img/fig92800WnX.png"
  s = pd.Series(3 * np.random.rand(4), index=['a', 'b', 'c', 'd'], name='series')
  s.plot.pie(figsize=(6,6))
  plot()
#+END_SRC

#+NAME: img/fig92800WnX.png
#+CAPTION: 饼图
[[file:img/fig92800WnX.png]]

#+BEGIN_SRC ipython :session :var path="img/fig92800KQw.png"
  s.plot.pie(labels=['AA', 'BB', 'CC', 'DD'],
             colors=['r', 'g', 'b', 'c'],
             autopct='%.2f', fontsize=20, figsize=(6, 6))
  plot()
#+END_SRC

#+NAME: img/fig92800KQw.png
#+CAPTION: 自定义
[[file:img/fig92800KQw.png]]

#+BEGIN_SRC ipython :session :var path="img/fig92800JkF.png"
  df = pd.DataFrame(3 * np.random.rand(4, 2),
                    index=['a', 'b', 'c', 'd'],
                    columns=['x', 'y'])
  df.plot.pie(subplots=True, figsize=(9, 4))
  plot()
#+END_SRC

#+NAME: img/fig92800JkF.png
#+CAPTION: 多个饼图组合
[[file:img/fig92800JkF.png]]


** 高级绘图函数

各种高级绘图函数在 =pandas.tools.plotting= 包里

#+BEGIN_SRC ipython :session :var path="img/fig92800j4R.png"
  from pandas.tools.plotting import scatter_matrix
  df = pd.DataFrame(np.random.randn(1000, 4), columns=['a', 'b', 'c', 'd'])
  scatter_matrix(df, alpha=0.2, figsize=(6, 6), diagonal='kde')
  plot()
#+END_SRC

#+NAME: img/fig92800j4R.png
#+CAPTION: scatter matrix
[[file:img/fig92800j4R.png]]

#+BEGIN_SRC ipython :session :var path="img/fig928009Me.png"
  from pandas.tools.plotting import lag_plot
  s = pd.Series(0.1 * np.random.rand(1000) +
                0.9 * np.sin(np.linspace(-99 * np.pi, 99 * np.pi, num=1000)))
  lag_plot(s)
  plot()
#+END_SRC

#+NAME: img/fig928009Me.png
#+CAPTION: lag
[[file:img/fig928009Me.png]]

#+BEGIN_SRC ipython :session :var path="img/fig92800Xhq.png"
  from pandas.tools.plotting import autocorrelation_plot
  s = pd.Series(0.7 * np.random.rand(1000) +
                0.3 * np.sin(np.linspace(-9 * np.pi, 9 * np.pi, num=1000)))
  autocorrelation_plot(s)
  plot()
#+END_SRC

#+NAME: img/fig92800Xhq.png
#+CAPTION: auto correlation
[[file:img/fig92800Xhq.png]]


* 导入导出

** 读入 csv



#+BEGIN_SRC ipython :session :var path="img/fig37020jl0.png"
  show_dataframe(pd.read_csv('data/ex1.csv'))
#+END_SRC

#+NAME: img/fig37020jl0.png
#+CAPTION: 读入 csv
[[file:img/fig37020jl0.png]]

*** 处理列名缺失

#+BEGIN_SRC ipython :session :var path="img/fig370208NW.png"
  show_dataframe(pd.read_csv('data/ex2.csv',
                             header=None,
                             names=['a', 'b', 'c', 'd', 'msg']))
#+END_SRC

#+NAME: img/fig370208NW.png
#+CAPTION: 列名缺失
[[file:img/fig370208NW.png]]


*** 指定某一列作为行索引

#+BEGIN_SRC ipython :session :var path="img/fig37020Wii.png"
  show_dataframe(pd.read_csv('data/ex2.csv',
                             header=None,
                             names=['a', 'b', 'c', 'd', 'msg'],
                             index_col='msg'))  # 多级行索引：index_col=['msg', 'a']

#+END_SRC

#+NAME: img/fig37020Wii.png
#+CAPTION: 指定行索引
[[file:img/fig37020Wii.png]]


*** 处理不规则分隔符

#+BEGIN_SRC ipython :session :var path="img/fig37020w2u.png"
  show_dataframe(pd.read_table('data/ex3.csv', sep='\s+'))
#+END_SRC

#+NAME: img/fig37020w2u.png
#+CAPTION: 处理不规则分隔符
[[file:img/fig37020w2u.png]]


*** 处理缺失值

#+BEGIN_SRC ipython :session :var path="img/fig37020vKE.png"
  show_dataframe(pd.read_csv('data/ex5.csv'))
#+END_SRC

#+NAME: img/fig37020vKE.png
#+CAPTION: 缺失值默认处理
[[file:img/fig37020vKE.png]]

#+BEGIN_SRC ipython :session :var path="img/fig37020JfQ.png"
  show_dataframe(pd.read_csv('data/ex5.csv', na_values=['NA', 'NULL', 'foo']))
#+END_SRC

#+NAME: img/fig37020JfQ.png
#+CAPTION: 指定缺失值
[[file:img/fig37020JfQ.png]]

#+BEGIN_SRC ipython :session :var path="img/fig37020jzc.png"
  show_dataframe(pd.read_csv('data/ex5.csv',
                             na_values={'message': ['foo', 'NA'],
                                        'something': ['two']}))
#+END_SRC

#+NAME: img/fig37020jzc.png
#+CAPTION: 根据列指定缺失值
[[file:img/fig37020jzc.png]]


*** 逐块读取

**** 按行读取

#+BEGIN_SRC ipython :session :var path="img/fig370209Hp.png"
  show_dataframe(pd.read_csv('data/ex6.csv', skiprows=10, nrows=10))
#+END_SRC

#+NAME: img/fig370209Hp.png
#+CAPTION: 指定读取几行
[[file:img/fig370209Hp.png]]


**** 按 chunk 读取

#+BEGIN_SRC ipython :session :exports both :results output
  dfs = pd.read_csv('data/ex6.csv', chunksize=1000)
  key_count = pd.Series([])
  for df in dfs:
      key_count = key_count.add(df['key'].value_counts(), fill_value=0)

  key_count = key_count.sort_values(ascending=False)
  log("key_count[:3]", key_count[:3])
#+END_SRC



** 导出 csv

#+BEGIN_SRC ipython :session :exports both :results output
  df = pd.read_csv('data/ex5.csv')
#+END_SRC

*** 不导出索引（推荐）

#+BEGIN_SRC ipython :session :exports both :results output
  df.to_csv('/tmp/ex5_out.csv', index=False)
#+END_SRC


*** 不导出列名

#+BEGIN_SRC ipython :session :exports both :results output
  df.to_csv('/tmp/ex5_out_noheader.csv', index=False, header=None)
#+END_SRC


*** 指定分隔符

#+BEGIN_SRC ipython :session :exports both :results output
  df.to_csv('/tmp/ex5_out_sep.csv', index=False, sep='|')
#+END_SRC


*** 导出部分列

#+BEGIN_SRC ipython :session :exports both :results output
  df.to_csv('/tmp/ex5_out_col.csv', index=False, columns=['a', 'b', 'message'])
#+END_SRC


** 其他格式

- HDF5 ::
  HDF5 是个 C 语言实现的库，可以高效地读取磁盘上的二进制存储的科学数据
- Excel ::
  =pd.read_excel=, =pd.ExcelFile=, =pd.ExcelWriter=
- JSON ::
  通过 json 模块转换为字典，再转换为 DataFrame
- SQL 数据库 ::
  通过 =pd.io.sql= 模块来从数据库读取数据
- NoSQL 数据库 ::
  需要结合相应的数据库模块，如 pymongo 。通过游标把数据读出来，再转换为 DataFrame


* 示例工程

** 电影数据分析

*** 数据读取

#+BEGIN_SRC ipython :session :exports both :results output
  user_names = ['user_id', 'gender', 'age', 'occupation', 'zip']
  users = pd.read_table('data/ml-1m/users.dat', sep='::',
                        header=None, names=user_names, engine='python')

  rating_names = ['user_id', 'movie_id', 'rating', 'timestamp']
  ratings = pd.read_table('data/ml-1m/ratings.dat', sep='::',
                          header=None, names=rating_names, engine='python')

  movie_names = ['movie_id', 'title', 'genres']
  movies = pd.read_table('data/ml-1m/movies.dat', sep='::',
                         header=None, names=movie_names, engine='python')

  log("users.head()", users.head())
  log("ratings.head()", ratings.head())
  log("movies.head()", movies.head())
#+END_SRC

*** 数据合并 (merge)

在 pandas 中，数据只有合并后才能进行分析

#+BEGIN_SRC ipython :session :var path="img/fig75428GYJ.png"
  data = pd.merge(pd.merge(users, ratings), movies)
  show_dataframe(data.head())
#+END_SRC

[[file:img/fig75428GYJ.png]]

*** 按性别查看各个电影的平均评分 (pivot_table)

*关心的值* 是 rating ，以 title 作为 *行索引* ，gender 作为 *列索引*

#+BEGIN_SRC ipython :session :exports both :results output
  mean_ratings_gender = data.pivot_table(values='rating', index='title',
                                         columns='gender', aggfunc='mean')
  log("mean_ratings_gender.head()", mean_ratings_gender.head())

#+END_SRC

*** 男女意见想差最大的电影 (sort_values)

#+BEGIN_SRC ipython :session :exports both :results output
  mean_ratings_gender['diff'] = mean_ratings_gender.F - mean_ratings_gender.M
  result = mean_ratings_gender.sort_values(by='diff', ascending=True)
  log("result.head()", result.head())
#+END_SRC

*** 参与评分人数最多 (group_by)

#+BEGIN_SRC ipython :session :exports both :results output

  ratings_by_movie_title = data.groupby('title').size()
  top_ratings = ratings_by_movie_title[ratings_by_movie_title > 1000]
  top_10_ratings = top_ratings.sort_values(ascending=False).head()
  log("top_10_ratings", top_10_ratings)
#+END_SRC


*** 活跃度超过 1000 的高分电影


#+BEGIN_SRC ipython :session :exports both :results output
  mean_ratings = data.pivot_table(values='rating', index='title', aggfunc='mean')
  top_10_movies = mean_ratings.loc[top_ratings.index].sort_values(by='rating',
                                                                  ascending=False).head(10)
  # 把平均评分和热度综合起来
  df_top_10_movies = pd.DataFrame(top_10_movies)
  df_top_10_movies['hot'] = top_ratings.loc[top_10_movies.index]
  log("df_top_10_movies", df_top_10_movies)

#+END_SRC


** 股票数据分析

*** 导入数据

#+BEGIN_SRC ipython :session :var path="img/fig92800x12.png"
  data = pd.read_csv('data/600690.csv', index_col='Date', parse_dates=True)
  show_dataframe(data.head())
#+END_SRC

#+NAME: img/fig92800x12.png
#+CAPTION: 股票数据
[[file:img/fig92800x12.png]]


*** 分析波动幅度

**** 针对复权收盘价进行重采样

#+BEGIN_SRC ipython :session :exports both :results output
  adj_price = data['Adj Close']
  log("adj_price.head()", adj_price.head())
#+END_SRC

#+BEGIN_SRC ipython :session :var path="img/fig92800wJM.png"
  resampled = adj_price.resample('m', how='ohlc')
  show_dataframe(resampled.head())
#+END_SRC

#+NAME: img/fig92800wJM.png
#+CAPTION: 按月份进行重采样
[[file:img/fig92800wJM.png]]

**** 计算平均波动幅度

#+BEGIN_SRC ipython :session :exports both :results output
  ripple = (resampled.high - resampled.low) / resampled.low
  log("平均波动幅度(%)", ripple.mean()*100)
#+END_SRC

*** 分析价格变化

#+BEGIN_SRC ipython :session :var path="img/fig92800KeY.png"
  adj_price.plot(figsize=(8, 6))
  plot()
#+END_SRC

#+NAME: img/fig92800KeY.png
#+CAPTION: 价格变化曲线
[[file:img/fig92800KeY.png]]


*** 最大年均复合增长率

#+BEGIN_SRC ipython :session :exports both :results output
  total_max_growth = adj_price.max() / adj_price.min()
  old_date = adj_price.index[-1]
  today = adj_price.index[0]
  years = (today.year - old_date.year)
  years = years if years > 0 else 1
  max_growth_per_year = total_max_growth ** (1.0 / years)
  log("最大年均复合增长率(%)", (max_growth_per_year-1)*100)
#+END_SRC

*** 当前年均复合增长率

一开始就买，现在还没卖的情况

#+BEGIN_SRC ipython :session :exports both :results output
  total_growth = adj_price.iloc[0] / adj_price.iloc[-1]
  old_date = adj_price.index[-1]
  today = adj_price.index[0]
  years = (today.year - old_date.year)
  years = years if years > 0 else 1
  growth_per_year = total_growth ** (1.0 / years)
  log("年均复合增长率(%)", (growth_per_year-1)*100)
#+END_SRC


*** 平均年化增长率

计算每年的增长率，然后再求平均值。

也可以计算每月的增长率，再求平均值，可以看到更短的一些周期变化。

这里的关键点在于：计算年化收益率时，应该要除以前一年的价格，
即在前一年的价格的基础上上涨了多少，而不是在当前年的价格。

#+BEGIN_SRC ipython :session :exports both :results output
  # first 表示那年第一天的数据
  price_in_years = adj_price.to_period(freq='A').groupby(level=0).first()
  log("price_in_years.head()", price_in_years.head())
  diff = price_in_years.diff()
  log("diff.head()", diff.head())
  rate_in_years =  diff / (price_in_years - diff)
  log("rate_in_years.head()", rate_in_years.head())
  log("平均年化(%)", rate_in_years.mean()*100)

#+END_SRC

#+BEGIN_SRC ipython :session :var path="img/fig92800kyk.png"
  (rate_in_years*100).plot(kind='bar', figsize=(8,6))
  X = [0, len(rate_in_years)]
  Y = [0, 0]
  plt.plot(X, Y, color='red', linestyle='-')
  plot()
#+END_SRC

#+NAME: img/fig92800kyk.png
#+CAPTION: 增长率图
[[file:img/fig92800kyk.png]]


** 小市值策略分析

*** 导入数据

|----------+----------+--------+----------+----------------+------------+------------|
| 交易日期 | 股票代码 | 总市值 | 是否交易 | 最后一天涨跌幅 | 交易天数   | 下月涨幅   |
|----------+----------+--------+----------+----------------+------------+------------|
| date     | code     | mktcap | tradable | ld_pchange     | trade_days | nm_pchange |
|----------+----------+--------+----------+----------------+------------+------------|


#+BEGIN_SRC ipython :session :var path="img/fig73568kg2.png"
  cols = ['date', 'code', 'mktcap', 'tradable', 'ld_pchange',
          'trade_days', 'nm_pchange']
  df = pd.read_csv('data/stock_data.csv',
                   parse_dates=['交易日期'],
                   encoding='gbk')
  df.columns = cols
  show_dataframe(df.head())
#+END_SRC

#+NAME: img/fig73568kg2.png
#+CAPTION: 原始数据
[[file:img/fig73568kg2.png]]

*** 按照交易日期，股票代码排序

#+BEGIN_SRC ipython :session :var path="img/fig73568j0L.png"
  df = df.sort_values(by=['date', 'code'])
  show_dataframe(df.head())
#+END_SRC

#+NAME: img/fig73568j0L.png
#+CAPTION: 按交易日期，股票代码排序
[[file:img/fig73568j0L.png]]


*** 设定分析起始日期

#+BEGIN_SRC ipython :session :var path="img/fig735689IY.png"
  date_filter = df.date > pd.to_datetime('20060101')
  df = df[date_filter]
  show_dataframe(df.head())
#+END_SRC

#+NAME: img/fig735689IY.png
#+CAPTION: 设定开始时间
[[file:img/fig735689IY.png]]

*** 过滤不符合分析要求的股票


#+BEGIN_SRC ipython :session :var path="img/fig73568Xdk.png"
  # 过滤无法交易的股票
  tradable_filter = df.tradable == 1
  df = df[tradable_filter]

  # 过滤交易时间过短的股票
  trade_days_filter = df.trade_days > 10
  df = df[trade_days_filter]

  # 过滤涨停股
  ld_pchange_filter = df.ld_pchange <= 0.097
  df = df[ld_pchange_filter]

  show_dataframe(df.head())
#+END_SRC

#+NAME: img/fig73568Xdk.png
#+CAPTION: 过滤无用数据
[[file:img/fig73568Xdk.png]]

*** 计算所有股票平均涨幅

#+BEGIN_SRC ipython :session :exports both :results output
  all_mean = df.groupby('date')['nm_pchange'].mean()
  log("all_mean.head()", all_mean.head())
#+END_SRC

*** 选取低市值股票

**** 计算每月市值排名

#+BEGIN_SRC ipython :session :var path="img/fig73568xxw.png"
  r = df.groupby('date')['mktcap'].rank()
  df['m_rank'] = r
  show_dataframe(df.head(10))
#+END_SRC

#+NAME: img/fig73568xxw.png
#+CAPTION: 每月排名
[[file:img/fig73568xxw.png]]

**** 选取市值排名前十低的股票

#+BEGIN_SRC ipython :session :var path="img/fig73568wFG.png"
  df = df[df.m_rank <= 10]
  show_dataframe(df.head(20))
#+END_SRC

#+NAME: img/fig73568wFG.png
#+CAPTION: 市值前十低
[[file:img/fig73568wFG.png]]

*** 计算低市值股票平均涨幅

#+BEGIN_SRC ipython :session :exports both :results output
  select_mean = df.groupby('date')['nm_pchange'].mean()
  log("select_mean.head()", select_mean.head())
#+END_SRC

*** 统计绘图

#+BEGIN_SRC ipython :session :var path="img/fig73568KaS.png"
  all_cum = (all_mean + 1).cumprod()
  select_cum = (select_mean + 1).cumprod()

  result = pd.DataFrame()
  result['overall'] = all_cum
  result['selected'] = select_cum
  result.plot()
  plot()
#+END_SRC

#+NAME: img/fig73568KaS.png
#+CAPTION: 对比
[[file:img/fig73568KaS.png]]
