# -*- mode: snippet -*-
#+TITLE:     Git
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS: h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/css/style.css" rel="stylesheet" type="text/css" />
 #+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>
#+TOC: headlines 3
#+STARTUP:   showall


* config

#+BEGIN_SRC sh
  git config --global user.name <name>
  git config --global user.email <email>
#+END_SRC

* branch

** 删除分支

#+BEGIN_SRC sh
  git branch -D <branch_to_delete>
#+END_SRC

** 删除服务器上的 branch

#+BEGIN_SRC sh
  git push origin :<branch_or_tag_to_delete>
#+END_SRC

* tag

=annotated tag= 保存为一个 tag 对象，而轻量级的 tag 是作为某个 commit 对象的别名。

** 创建

#+BEGIN_SRC sh
  git tag -m <msg> <Tag>
#+END_SRC

** 删除

#+BEGIN_SRC sh
  git tag -d <tag_to_delete>
  git push origin :<tag_to_delete>
#+END_SRC

** 显示

#+BEGIN_SRC sh
  git tag -n # 显示所有 tag
#+END_SRC

* clean

** 清除当前工作区中没有加入版本库的文件和目录（非跟踪文件和目录）

#+BEGIN_SRC sh

  git clean -fd
#+END_SRC

* rm

** 删除暂存区文件，工作区保持不变

#+BEGIN_SRC sh
  git rm --cached <file>
#+END_SRC

* diff

** 比较工作区与暂存区

#+BEGIN_SRC sh
  git diff                   # workspace & stage

#+END_SRC

** 比较工作区与仓库

#+BEGIN_SRC sh
  git diff <commit>          # workspace & <commit>
#+END_SRC

** 比较暂存区与仓库

#+BEGIN_SRC sh
  git diff --cached|--staged # stage & HEAD
  git diff --cached <commit> # stage & <commit>
#+END_SRC

** 比较文件

#+BEGIN_SRC sh
  git diff <commit1> <commit2> <filename>
#+END_SRC

* cat-file

=git cat-file= 等效于 =git show=

** 查看历史文件

#+BEGIN_SRC sh
  git cat-file -p <sha>                  # 查看 sha 对应的内容，即历史文件
#+END_SRC

** 查看暂存区中的文件对象

#+BEGIN_SRC sh
  git cat-file -p <:/path/to/file>
#+END_SRC

** 查看仓库中的文件对象

#+BEGIN_SRC sh
  git cat-file -p <commit:/path/to/file> # 查看 commit 中的文件对象
#+END_SRC

** 查看 commit 对象

#+BEGIN_SRC sh
  git cat-file <commit>
#+END_SRC

** 查看 commit 对象对应的树对象

#+BEGIN_SRC sh
  git cat-file <commit:>
  git cat-file -p <commit^{tree}>        # 同上
#+END_SRC

* ls-*

** 显示 commit 指向的目录树

#+BEGIN_SRC sh
  git ls-tree -r <commit>
#+END_SRC

** 显示暂存区的目录树

#+BEGIN_SRC sh
  git ls-files -s
#+END_SRC

** 显示 remote 的目录树

#+BEGIN_SRC sh
  git ls-remote <remote>
#+END_SRC

* reset

** 替换 HEAD，替换暂存区，替换工作区

#+BEGIN_SRC sh
  git reset --hard <commit> #
#+END_SRC

** 替换 HEAD，暂存区不变，工作区不变

#+BEGIN_SRC sh
  git reset --soft <commit>
#+END_SRC

** 替换 HEAD，替换暂存区，工作区不变

#+BEGIN_SRC sh
  git reset <commit>
#+END_SRC

** 对 filename 的改动撤出暂存区

#+BEGIN_SRC sh
git reset -- <filename>
#+END_SRC

* checkout

** 暂存区中的 filename，覆盖工作区中的 filename
#+BEGIN_SRC sh
  git checkout -- <filename>          #
#+END_SRC

** HEAD 不变，用 branch 指向的 filename 替换暂存区和工作区中的文件
#+BEGIN_SRC sh
git checkout <branch> -- <filename> #
#+END_SRC

** 用暂存区中的所有文件覆盖工作区中的文件

#+BEGIN_SRC sh
  git checkout -- . #
  git checkout .    # 同上n
#+END_SRC

** 汇总显示工作区，暂存区和 HEAD 的差异

#+BEGIN_SRC sh
  git checkout      #
  git checkout HEAD # 同上
#+END_SRC

* revert

#+BEGIN_SRC sh
  git revert -n                   # no commit
#+END_SRC


* log

#+BEGIN_SRC sh
  git log --oneline <commit^@> # 某次提交的历史提交，自身除外，用语法 commit^@ 表示

  git log --oneline <commit^!> # 只要提交本身，不包括其历史提交，用语法 commit^! 表示
#+END_SRC


* blame

#+BEGIN_SRC sh
  git blame -L <line>,+<incr> <filename>
#+END_SRC


* rebase

=git rebase <since>= 等效于 =git rebase --onto <since> <since> HEAD=

#+BEGIN_EXAMPLE
  git rebase 的归一化形式：git rebase --onto <NewBase> <Since> <Till>

  变基操作过程：
    1) 首先执行 git checkout `Till`
    2) 将`Since`..`Till`标识的提交范围写到一个临时文件中
    3) git reset --hard `NewBase`
    4) 从保存在临时文件中的提交列表中，将提交逐一按顺序重新提交到重置后的分支上
    5) 如果遇到提交已经在分支中包含，则跳过改提交
    6) 如果在提交过程遇到冲突，则变基过程暂停；
       用户解决冲突后，执行 git rebase --continue 继续变基操作；
       或者执行git rebase --skip 跳过该次提交；
       或者执行 git rebase --abort 就此终止变基操作切换到变基前的分支上
#+END_EXAMPLE

* remote


** 查看状态

#+BEGIN_SRC sh
  git remote show <remote> # Show status of remote
#+END_SRC

* rev-parse

** 得到文件对应的 SHA

#+BEGIN_SRC sh
  git rev-parse `Commit:/path/to/file` #
#+END_SRC



* stash

#+BEGIN_SRC sh
  git stash -u                    # 包括工作区
  git stash save -u "message"     # 包括工作区，加上注释
#+END_SRC

* subtree

** 添加

#+BEGIN_SRC sh
  git remote add my-subtree <url>
  git subtree add —-prefix=dir/ my-subtree master
#+END_SRC

** push

#+BEGIN_SRC sh
  git subtree push --prefix=dir my-subtree master
#+END_SRC

** pull

#+BEGIN_SRC sh
  git subtree pull --prefix=dir my-subtree master
#+END_SRC

* filter-branch

** 查找仓库中大文件

   #+BEGIN_SRC sh
     git rev-list --objects --all | \
       grep "$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk '{print$1}')"
   #+END_SRC

** 重写大文件涉及到的所有提交（重写历史记录）

   #+BEGIN_SRC sh
     git filter-branch -f --prune-empty \
       --index-filter 'git rm -rf --cached --ignore-unmatch <your-file-name>' \
       --tag-name-filter cat -- --all
   #+END_SRC

* 参数

** 忽略空白字符

=-X ignore-all-space=