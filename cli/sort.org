#+TITLE:     Sort
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS: h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/css/style.css" rel="stylesheet" type="text/css" />
#+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>
#+TOC: headlines 3
#+STARTUP:   showall


* 参数

- -n ::

依數字大小排序

- -r ::

反向排序

- -t, ::

以 , 作为分隔符 ( 默认是以 =[:space:]= 作为分隔符 )

- -k[KEYDEF] ::

指定排序的 key ， 格式为：
#+BEGIN_EXAMPLE
  F[.C][OPTS][,F[.C][OPTS]]
  ---------- -------------
    start       stop

  F 指的是字段 (field) 序号（从 1 开始），C 指的是字段中的字符位置（从 1 开始）

  ,*默认的结束位置是行尾*
#+END_EXAMPLE

- -m ::

合并已排序的文件



* 常用命令

** 合并已排序的文件

#+BEGIN_SRC sh
  sort -m <file1> <file2>
#+END_SRC


** 检查排序状态

#+BEGIN_SRC sh
  sort -C <file>
#+END_SRC


** 第三列倒序, 第二列升序排列

#+BEGIN_SRC sh
  sort -k3,3rn -k2,2n <file>
#+END_SRC



** 选项 *k* 的说明

*** 相同项的先后顺序 *由左边各列决定* (从第一列开始)


#+BEGIN_SRC sh
  $> cat face.txt
  baidu  100 5000
  google 100 5000
  sohu   100 4500
  guge   50  3000

  $> cat face.txt  | sort  -k2n
  guge   50  3000
  baidu  100 5000
  google 100 5000
  sohu   100 4500
#+END_SRC

最后一行出现貌似顺序不正确的行为原因如下:

命令将第二列到行尾 *看做整体* ，即 =50 3000= ， =100 5000= 等，由于这些块无法进行数值比较，因此实际比较的是 50 和 100 ，
因此出现 3 个 100 ，这时就由第一列来决定最后的顺序。


*** 跨域的假象

假设有这样一个命令： =sort -k2.1,3.1=

sort 只会比较第二个字段的第一个字符到 *第二个字段的最后一个字符* 的部分，而不会把第三个字段的开头字符纳入比较范围。

*** 举例说明

#+BEGIN_SRC sh
  $> cat world.txt
  z a a
  y a b
  x a c

  $> cat world.txt | sort -k2
  z a a
  y a b
  x a c

  $> cat world.txt | sort -k2,2
  x a c
  y a b
  z a a

  $> cat world.txt | sort -k2.1,3.1
  x a c
  y a b
  z a a
#+END_SRC

#+BEGIN_SRC sh
  $> cat world.txt
  z a a a
  y a a b
  x a b c

  $> cat world.txt  | sort -k2 -k3
  z a a a
  y a a b
  x a b c

  $> cat world.txt  | sort -k2,2 -k3,3
  y a a b
  z a a a
  x a b c

  $> cat world.txt  | sort -k2,2
  x a b c
  y a a b
  z a a a

  $> cat world.txt  | sort -k2,2 -k3
  z a a a
  y a a b
  x a b c
#+END_SRC
