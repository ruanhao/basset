#+TITLE:     Find
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS: h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/css/style.css" rel="stylesheet" type="text/css" />
 #+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>
#+TOC: headlines 4
#+STARTUP:   showall

* 基本用法


** 根据时间查询


*** 最近 10 分钟内修改过的文件

#+BEGIN_SRC sh
  find . -mmin -10
#+END_SRC

*** 最近 1 小时内修改过的文件

#+BEGIN_SRC sh
  find / -mtime -1
#+END_SRC

*** 最近 1 分钟内访问过的文件

#+BEGIN_SRC sh
  find . -amin -1
#+END_SRC


*** 最近 1 分钟内创建的文件

#+BEGIN_SRC sh
  find . -cmin -1
#+END_SRC


*** 某个时间点之后的文件

#+BEGIN_SRC sh
  touch -t 05042140 stampfile
  find . -newer stampfile
#+END_SRC

*** 与另一个文件时间作比较

- modify 时间比较

  #+BEGIN_SRC sh
    find . -newer file1.txt -not -newer file2.txt
  #+END_SRC

- access 时间比较

  #+BEGIN_SRC sh
    find . -anewer file1.txt -not -anewer file2.txt
  #+END_SRC

- create 时间比较

  #+BEGIN_SRC sh
    find . -cnewer file1.txt -not -cnewer file2.txt
  #+END_SRC


** 根据大小查询

*** 按字节

#+BEGIN_SRC sh
  find . -size  1024c             # = 1024 bytes
  find . -size +1024c             # > 1024 bytes
  find . -size -1024c             # < 1024 bytes
#+END_SRC


*** 按块(512 bytes)

#+BEGIN_SRC sh
  find . -size  2                  # = 1024 bytes
  find . -size +2                  # > 1024 bytes
  find . -size -2                  # < 1024 bytes
#+END_SRC

*** 按 k

#+BEGIN_SRC sh
  find . -size  1k                # = 1024 bypts
  find . -size +1k                # > 1024 bypts
  find . -size -1k                # < 1024 bypts
#+END_SRC


*** 按空文件

#+BEGIN_SRC sh
  find . -size 0
#+END_SRC


*** 按空文件或目录

#+BEGIN_SRC sh
  find . -empty
#+END_SRC

*** 删除空目录

#+BEGIN_SRC sh
  find . -type d -empty -delete
#+END_SRC

*** 找出 5 个最大的文件

#+BEGIN_SRC sh
  find . -type f -exec ls -s {} \; | sort -n -r | head -5
#+END_SRC


** 指定多个目录查询

#+BEGIN_SRC sh
  find /usr /home /tmp -name \*.jar
#+END_SRC


** 忽略路径

#+BEGIN_EXAMPLE
-prune   If the file is a directory, do not descend into it. Return true.
         If -depth is given, no effect. Return false.
         Because -delete implies -depth, you cannot usefully use -prune and -delete together.
#+END_EXAMPLE

#+BEGIN_SRC sh
  find . \( -path "./path1" -o -path "./path2" \) -prune -o -name "filename" -print
#+END_SRC


** 对搜索到的文件执行操作

#+BEGIN_SRC sh
  find -iname "myprogram.c" -exec md5sum {} \;
#+END_SRC


** 指定 inode

#+BEGIN_SRC sh
  find -inum 888888 -delete
#+END_SRC



* 注意事项

** 使用 =-o= 选项时建议明确指明 =-print=

  If the given expression to find does not contain any of the 'action' primaries ‑exec, ‑ok, or ‑print, then the given expression is effectively replaced by:

  =find \( expression \) -print=

  The implied parenthesis can cause unexpected results.

  For example, consider these two similar commands:

  #+BEGIN_SRC bash
  $ find -name tmp -prune -o -name \*.txt
  ./bin/data/secret.txt
  ./tmp
  ./missingEOL.txt
  ./public_html/graphics/README.txt
  ./datafile.txt

  $ find -name tmp -prune -o -name \*.txt -print
  ./bin/data/secret.txt
  ./missingEOL.txt
  ./public_html/graphics/README.txt
  ./datafile.txt
  #+END_SRC

  The lack of an action in the first command means it is equivalent to:

  =find . \( -name tmp -prune -o -name \*.txt \) -print=

  This causes tmp to be included in the output.

  However for the second find command *the normal rules of Boolean operator precedence apply*, so the pruned directory does not appear in the output.
