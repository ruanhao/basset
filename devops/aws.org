#+TITLE:     AWS
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS: h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/solarized/style.css" rel="stylesheet" type="text/css" />
 #+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>
#+TOC: headlines 5





* EC2

** Instance Families

[[file:img/aws_instance_family_format.png]]

- T family
  Cheap, moderate baseline performance with the ability to burst to higher performance for short periods of time
- M family
  General purpose, with a balanced ration of CPU and memory
- C family
  Computing optimized, high CPU performance
- R family
  Memory optimized, with more memory than CPU power compared to M family
- D family
  Storage optimized, offering huge HDD capacity
- I family
  Storage optimized, offering huge SSD capacity
- X family
  Extensive capacity with a focus on memory, up to 1952 GB memory and 128 virtual cores
- F family
  Accelerated computing based on FPGAs
- P, G, and CG family
  Accelerated computing based on GPUs


** User Data

The user data is always accessible from the VM with a HTTP GET request to =http://169.254.169.254/latest/user-data= .


** EBS

Elastic Block Store (EBS) provides persistent block-level storage with *built-in data replication* (Replicate your data on multiple disks to
prevent data loss due to hardware failures). \\
An EBS volume is separate from an EC2 instance and connected over the network.


#+BEGIN_EXAMPLE
  EBS is either not attached to an EC2 instance or attached to exactly ONE EC2 instance at a time.
  You can't attach the same EBS volume to multiple virtual machines!
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  EBS volume is tied to a data center (also called an AZ) and can only be attached over the network to a single EC2 instance FROM THE SAME DATA CENTER.
#+END_EXAMPLE

[[file:img/aws_ebs_attach.png]]

Usually, EBS volumes can be found somewhere in the range of =/dev/xvdf= to =/dev/xvdp=. \\
The root volume (=/dev/xvda=) is an exception: it's _based on the AMI_ you choose when you launch the EC2 instance,
and contains everything needed to boot the instance (OS files).


*** Snapshot

A snapshot is a block-level _incremental backup_ that is stored in S3.

#+BEGIN_EXAMPLE
  If your volume is 5 GiB in size and you use 1 GiB of data, your first snapshot will be around 1 GiB in size.
  After the first snapshot is created, only the changes will be saved to S3, to reduce the size of the backup.
#+END_EXAMPLE


** EFS

EFS filesystem can be used by multiple EC2 instances _from different data centers_.

[[file:img/aws_ebs_efs_compare.png]]


*** Filesystem and Mount target

- Filesystem
  Stores your data
- Mount target
  Makes your data accessible



[[file:img/aws_efs_mount_target.png]]


Filesystem is the resource that stores your data in an AWS region, but you can't access it directly. \\
It is located in an AWS region and replicates your data under the covers *across multiple availability zones*. \\
To do so, you must create an EFS mount target in a subnet.
The mount target provides a *network endpoint* that you can use to mount the filesystem on an EC2 instance via NFSv4.1. \\
The EC2 instance must be _in the same subnet_ as the EFS mount target (but you can create mount targets in multiple subnets).


** Instance Store

An instance store provides block-level storage _directly_ attached to the machine hosting your VM. \\
It is part of an EC2 instance (not standalone resources like EBS volume) and available only if your instance is running;
it won't persist your data if you stop or terminate the instance.

[[file:img/aws_instance_store.png]]


#+BEGIN_EXAMPLE
  Don't use an instance store for data that must not be lost; use it for caching, temporary processing.
#+END_EXAMPLE


** Load Balancer

*** ALB

An ALB consists of three required parts and one optional part:

- Load balancer

  Defines some core configurations, like the subnets the load balancer runs in,
  whether the load balancer gets public IP addresses, whether it uses IPv4 or both IPv4 and IPv6, and additional attributes.
- Listener

  The listener defines the port and protocol that you can use to make requests to the load balancer. \\
  If you like, the listener can also terminate TLS for you.
  A listener links to a target group that is used as the default if no other listener rules match the request.
- Target group

  A target group defines your group of backends.
  The target group is responsible for checking the backends by sending periodic health checks. \\
  Usually backends are EC2 instances, but could also be a Docker container running on EC2 Container Service or
  a machine in your data center paired with your VPC.
- Listener rule

  (_Optional_) \\
  You can define a listener rule. The rule can choose a different target group based on the HTTP path or host. \\
  Otherwise requests are forwarded to the default target group defined in the listener.


[[file:img/aws_alb.png]]


* Cloud Formation

A basic CloudFormation template is structured into five parts:

1. Format version
   The latest template format version is 2010-09-09
2. Description
   What is this template about?
3. Parameters
   Parameters are used to customize a template with values: for example, domain name, customer ID, and database password.
4. Resources
   A resource is the smallest block you can describe. Examples are a virtual machine, a load balancer, or an Elastic IP address.
5. Outputs
   An output returns something from your template, such as the public name of an EC2 instance.

** [[https://docs.aws.amazon.com/en_us/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html][Parameters]]


#+BEGIN_SRC yaml
  Parameters:
    KeyName:
      Description: 'Key Pair name'
      Type: 'AWS::EC2::KeyPair::KeyName' # Only key pair names are allowed.
    NumberOfVirtualMachines:
      Description: 'How many virtual machine do you like?'
      Type: Number
      Default: 1 # The default is one virtual machine.
      MinValue: 1
      MaxValue: 5 # Prevent massive costs with an upper bound.
    WordPressVersion:
      Description: 'Which version of WordPress do you want?'
      Type: String
      AllowedValues: ['4.1.1', '4.0.1'] # Restricted to certain versions
#+END_SRC

*** Valid types

- String
- Number
- AWS::EC2::AvailabilityZone::Name
  such as =us-west-2a=
- AWS::EC2::Image::Id
- AWS::EC2::Instance::Id
- AWS::EC2::KeyPair::KeyName
- AWS::EC2::SecurityGroup::Id
- AWS::EC2::Subnet::Id
- AWS::EC2::Volume::Id
  An EBS volume ID (network attached storage)
- AWS::EC2::VPC::Id
- AWS::Route53::HostedZone::Id
  A DNS zone ID


*** Constraints

- Default
- NoEcho
- AllowedValues
- AllowedPattern
- MinLength, MaxLength
- MinValue, MaxValue
- ConstraintDescription


** [[https://docs.aws.amazon.com/en_us/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html][Resources]]

A resource has at least _a name_, _a type_, and _some properties_.



* IAM

IAM controls *who* (authentication) can do *what* (authorization) in your AWS account.

[[file:img/aws_iam_concepts.png]]

- IAM user
  Used to authenticate people accessing your AWS account.
- IAM group
  A collection of IAM users.
- IAM role
  Used to _authenticate AWS resources_, for example an EC2 instance.
- IAM policy
  Used to define the permissions for a user, group, or role.

** ARN


[[file:img/aws_arn.png]]



** CLIs

*** Get account id

#+BEGIN_SRC sh
  aws iam get-user --query "User.Arn" --output text
#+END_SRC

*** Create groud and user

#+BEGIN_SRC sh
  aws iam create-group --group-name "admin"
  aws iam attach-group-policy --group-name "admin" --policy-arn "arn:aws:iam::aws:policy/AdministratorAccess"
  aws iam create-user --user-name "myuser"
  aws iam add-user-to-group --group-name "admin" --user-name "myuser"
  aws iam create-login-profile --user-name "myuser" --password "$Password"
#+END_SRC


* Security Group

** Bastion Mode

[[file:img/aws_bastion_mode.png]]


* VPC

** ACL

Network ACLs restrict traffic that goes from one subnet to another, acting as a firewall.

#+BEGIN_EXAMPLE
  There's an important difference between security groups and ACLs: security groups are STATEFUL, but ACLs aren't.
  If you allow an inbound port on a security group, the corresponding response to requests on that port are allowed as well.
  That's not true for ACLs.

  Security groups are tied to an instance, while Network ACL are tied to the subnet.
#+END_EXAMPLE

*Recommend to start with using security groups to control traffic. If you want to add an extra layer of security, you should use ACL on top.*


** NAT Gateway

#+BEGIN_SRC plantuml :file img/aws_nat.png :eval never-export

entity IGW


node "VPC" {
  package "PublicSubnet" {
    [NATGateway]
  }

  package "PrivateSubnet" {
    [Instance]
  }
}

NATGateway <.left. PrivateSubnet
PublicSubnet .up.> IGW

#+END_SRC

#+RESULTS:
[[file:img/aws_nat.png]]


- VPC 与 IGW 绑定
- PrivateSubnet 默认路由指向 NATGateway
- Instance 无需分配外网地址（即无法被外部访问）

#+BEGIN_EXAMPLE
  创建 VPC 时会生成默认路由表，Subnet 默认情况下将继承这个路由表，该路由表只有一条记录（ VPC 网段的 local 路由）。
  通常会自定义一个新的路由表给 Subnet 使用，该路由表被 attach 至 VPC （即包含 VPC 网段的 local 路由)，再添加一条指向 IGW 的 default 路由。
#+END_EXAMPLE



* Auto Scaling

To configure auto-scaling, you need to create two parts of the configuration:

- launch configuration
  Contains all information needed to launch an EC2 instance: instance type (size of virtual machine) and image (AMI) to start from.
- auto-scaling group
  Tells the EC2 service how many virtual machines should be started with a specific launch configuration, how to monitor the instances,
  and in which subnets EC2 instances should be started.


* S3

** Object Store

Data in S3 is managed as objects, so the storage system is called an *object store*.

In an object store, data is stored as objects.\\
Each object consists of a _globally unique identifier_, _some metadata_, and the _data_ itself,\\
An object's globally unique identifier (GUID) is also known as its key; you can address the object using the GUID.

file:img/aws_s3_obj_storage.png


** Buckets

S3 uses *buckets* to group objects.\\
A bucket is a _container_ for objects. You can create multiple buckets, _each of which has a globally unique name_, \\
to separate data for different scenarios.

You have to choose a bucket name *that isn't used by any other AWS customer in any other region*.

file:img/aws_s3_https.png

file:img/aws_s3_buckets.png


** CLI

*** 文件操作

**** 拷贝

#+BEGIN_SRC sh
  aws s3 cp --recursive s3://haoru.cisco.com/<dir>/ <local-path>
#+END_SRC


*** 目录操作

**** 创建桶

The name of the bucket must be unique among all other S3 buckets, even those in other regions and those of other AWS customers.

#+BEGIN_SRC sh
  aws s3 mb s3://haoru.cisco.com
#+END_SRC

**** 同步

#+BEGIN_SRC sh
  aws s3 sync <path> s3://haoru.cisco.com/<dir>
#+END_SRC



**** 删除桶

#+BEGIN_SRC sh
  aws s3 rb --force s3://haoru.cisco.com
#+END_SRC

**** Versioning for objects

#+BEGIN_SRC sh
  aws s3api put-bucket-versioning --bucket <bucket-name> --versioning-configuration Status=Enabled # 启用 versioning
  aws s3api list-object-versions --bucket <bucket-name> # retrieves all objects and versions
#+END_SRC


** 静态资源

参考: https://github.com/ruanhao/python-for-fun/blob/master/aws/s3/ut.py

*** 创建桶

#+BEGIN_SRC sh
  aws s3 mb s3://<BucketName>
  aws s3 cp helloworld.html s3://$BucketName/helloworld.html
#+END_SRC

*** 配置桶使其支持 static web hosting

Allow everyone to view or download the documents included in your bucket:

#+BEGIN_SRC sh
  aws s3api put-bucket-policy --bucket $BucketName --policy file://bucketpolicy.json
#+END_SRC

bucketpolicy.json:

#+BEGIN_SRC js
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "AddPerm",
        "Effect": "Allow",
        "Principal": "*",
        "Action": ["s3:GetObject"],
        "Resource": ["arn:aws:s3:::<BucketName>/*"]
      }
    ]
  }
#+END_SRC


Enable and configure the static web-hosting feature of S3:

#+BEGIN_SRC sh
  aws s3 website s3://$BucketName --index-document helloworld.html
#+END_SRC

*** 访问

=http://$BucketName.s3-website-$Region.amazonaws.com=


*** 自定义域名

All you have to do is to add a CNAME record for your domain, pointing to the bucket's S3 endpoint.

*The CNAME record will only work if you comply with the following rules:*

- Your bucket name must match the CNAME record name

  For example, if you want to create a CNAME for =awsinaction.example.com=, your bucket name must be awsinaction.example.com as well.
- CNAME records *won't work for the primary domain name* (such as =example.com=)

  You need to use a subdomain for CNAMEs like awsinaction or www, for example.
  If you want to link a primary domain name to an S3 bucket, you need to use the Route 53 DNS service from AWS.

Linking a custom domain to your S3 bucket only works for HTTP.
If you want to use HTTPS (and you probably should), use AWS CloudFront together with S3.
AWS CloudFront accepts HTTPS from the client and forwards the request to S3.

* 参考资料

- [[https://github.com/AWSinAction/code2][AWS in Action]]