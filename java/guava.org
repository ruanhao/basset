#+TITLE:     Guava
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS:   h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+STARTUP:   showall
#+TOC:       headlines 3
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/solarized/style.css" rel="stylesheet" type="text/css" />
 #+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>


* 基本工具类

** 字符串工具类

*** [[https://github.com/google/guava/wiki/StringsExplained#joiner][Joiner]]

#+BEGIN_SRC java
  String[] strList = {"a", "b", "c", null, "d", "e", null, null};
  Joiner.on("|").skipNulls().join(strList);      // a|b|c|d|e
  Joiner.on("|").useForNull("NA").join(strList); // a|b|c|NA|d|e|NA|NA

  Joiner.on("#").withKeyValueSeparator("=").join(strMap);
#+END_SRC


*** [[https://github.com/google/guava/wiki/StringsExplained#splitter][Splitter]]

#+BEGIN_SRC java
  Splitter.on(',').trimResults().omitEmptyStrings().split("foo,bar,,   qux");
  Splitter.on(',').omitEmptyStrings().split("a,,c,d"); // "a", "c", "d"
  Splitter.on(',').trimResults().split("a, b, c, d"); // "a", "b", "c", "d"
  Splitter.on(',').trimResults(CharMatcher.is('_')).split("_a ,_b_ ,c__"); // "a", "b_", "c"
  Splitter.on(',').limit(3).split("a,b,c,d"); // "a", "b", "c,d"
#+END_SRC

**** 基本工厂方法

- Splitter.on(char)
- Splitter.on(CharMatcher)
- Splitter.on(String)
- Splitter.on(Patter)
- Splitter.fixedLength(int)

**** 修饰方法

- omitEmptyStrings()
- trimResults() , 即 =trimResults(CharMatcher.WHITESPACE)=
- trimResults(CharMatcher)
- limit(int)


*** [[https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/Splitter.MapSplitter.html][Splitter.MapSplitter]]

#+BEGIN_SRC java
  Splitter.on(';').trimResults().withKeyValueSeparator("=>").split("a=>b ; c=>b");
  /*
    {
      "a": "b",
      "c": "b"
    }
  */
#+END_SRC


*** [[https://github.com/google/guava/wiki/StringsExplained#charmatcher][CharMatcher]]

#+BEGIN_SRC java
  String noControl = CharMatcher.javaIsoControl().removeFrom(string); // remove control characters
  String theDigits = CharMatcher.digit().retainFrom(string); // only the digits
  String spaced = CharMatcher.whitespace().trimAndCollapseFrom(string, ' ');
  // trim whitespace at ends, and replace/collapse whitespace into single spaces
  String noDigits = CharMatcher.javaDigit().replaceFrom(string, "*"); // star out all digits
  String lowerAndDigit = CharMatcher.javaDigit().or(CharMatcher.javaLowerCase()).retainFrom(string);
  // eliminate all characters that aren't digits or lowercase
#+END_SRC

**** 内置工厂方法

- any()
- none()
- whitespace()
- breakingWhitespace()
- invisible()
- digit()
- javaLetter()
- javaDigit()
- javaLetterOrDigit()
- javaIsoControl()
- javaLowerCase()
- javaUpperCase()
- ascii()
- singleWidth()

**** 自定义工厂方法

- anyOf(CharSequence)
- is(char)
- inRange(char, char)

**** 逻辑运算工厂方法

- negate()
- and(CharMatcher)
- or(CharMatcher)


*** Charsets

*** CaseFormat

|------------------+------------------|
| Format           | Example          |
| LOWER_CAMEL      | lowerCamel       |
| LOWER_HYPHEN     | lower-hyphen     |
| LOWER_UNDERSCORE | lower_underscore |
| UPPER_CAMEL      | UpperCamel       |
| UPPER_UNDERSCORE | UPPER_UNDERSCORE |
|------------------+------------------|

#+BEGIN_SRC java
  CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, "CONSTANT_NAME"));
  // returns "constantName"
#+END_SRC

*** Strings

#+BEGIN_SRC java
  Strings.padEnd("foo", 6, 'x');  // fooxxx

  Strings.nullToEmpty("");        // ""
  Strings.nullToEmpty(null);      // ""
  Strings.nullToEmpty("hello");   // "hello"

  Strings.emptyToNull("");        // null
  Strings.emptyToNull(null);      // null
  Strings.emptyToNull("hello");   // "hello"

  Strings.isNullOrEmpty(null);    // true
  Strings.isNullOrEmpty("");      // true
  Strings.isNullOrEmpty("hello"); // false
#+END_SRC

- commonPrefix(CharSequence a, CharSequence b) (公共前缀)
- commonSuffix(CharSequence a, CharSequence b) (公共后缀)
- emptyToNull(String)
- isNullOrEmpty(String)
- nullToEmpty(String)
- padEnd(String s, int minLength, char padChar)
- padStart(String s, int minLength, char padChar)
- repeat(String s, int count)




** [[https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/Stopwatch.html][Stopwatch]]

#+BEGIN_SRC java
  Stopwatch stopwatch = Stopwatch.createStarted();
  doSomething();
  stopwatch.stop(); // optional

  Duration duration = stopwatch.elapsed();

  log.info("time: " + stopwatch); // formatted string like "12.3 ms"
#+END_SRC

* Collections

** List

#+BEGIN_SRC java
ImmutableList<String> of = ImmutableList.of("a", "b", "c", "d");
#+END_SRC

#+BEGIN_SRC java
  List<ToClass> toList = Lists.transform(fromList, new Function<FromClass, ToClass>() {
      @Override
      public ToClass apply(FromClass from) {
          ToClass to = new ToClass();
          to.setX(from.getX());
          to.setY(from.getY());
          to.setZ(from.getZ());
          return to;
      }});
#+END_SRC


** Map

#+BEGIN_SRC java
ImmutableMap<String,String> map = ImmutableMap.of("key1", "value1", "key2", "value2");
#+END_SRC


** Snippets

*** Filter Nulls

#+BEGIN_SRC java
  Iterable<String> filterStrings = Iterables.filter(values, Predicates.notNull());
#+END_SRC

#+BEGIN_SRC java
  List<String> filterStrings = FluentIterable.from(origins).filter(Predicates.notNull()).toList();
#+END_SRC

#+BEGIN_SRC java
  Collection<String> filterStrings = Collections2.filter(valuse, Predicates.notNull());
#+END_SRC


*** InputStream to byte array

=byte[] bytes = ByteStreams.toByteArray(inputStream);=


* IO

** [[https://github.com/google/guava/wiki/IOExplained#io-utilities][Source/Sink]]

** [[https://google.github.io/guava/releases/23.0/api/docs/com/google/common/io/Closer.html][Closer]]

#+BEGIN_SRC java
  Closer closer = Closer.create();
  try {
      InputStream in = closer.register(openInputStream());
      OutputStream out = closer.register(openOutputStream());
      // do stuff
  } catch (Throwable e) {
      // ensure that any checked exception types other than IOException that could be thrown are
      // provided here, e.g. throw closer.rethrow(e, CheckedException.class);
      throw closer.rethrow(e);
  } finally {
      closer.close();
  }
#+END_SRC