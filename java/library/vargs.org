* 1, 基本原理

** 1.1, 方法体中以数组形式访问可变参数

  #+BEGIN_SRC java

    public static void fun(int a, int ... args) {
        for (int i = 0; i < args.length; ++i) {
            System.out.println(args[i]);
        }
    }

  #+END_SRC

** 1.2, 调用时自动拆包

    #+BEGIN_SRC java
      public void foo(int ... i) {}
      public void boo(Object ... o) {}

      public void main() {
          int[] intArr = new int[] {1, 2, 3};
          String[] strArr = new String[] {"1", "2", "3"};
          foo(intArr); // 等效于调用 foo(1, 2, 3);
          boo(intArr); // 不会自动拆包, 只会有一个参数 intArr,
                       // 因为 Primitive 类型不是 Object 的子类, 但 Primitive[] 类型是 Object 的子类
      }
    #+END_SRC

    在泛型的条件下, 只有非 Primitive[] 类型的才会自动拆包:

    #+BEGIN_SRC java
      public <T> T foo(T ... t) { return t[0] }

      public void main() {
          int[] intArr = new int[] {1, 2, 3};
          String[] strArr = new String[] {"1", "2", "3"};
          foo(intArr); // 不会拆包, T 为 int[]
          foo(StrArr); // 会拆包, T 为 String
      }
    #+END_SRC
