#+TITLE:     设计模式
#+AUTHOR:    Hao Ruan
#+EMAIL:     haoru@cisco.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS:   h:6 html-postamble:nil html-preamble:t tex:t f:t ^:nil
#+STARTUP:   showall
#+TOC:       headlines 3
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="../org-html-themes/solarized/style.css" rel="stylesheet" type="text/css" />
 #+HTML: <div class="outline-2" id="meta">
| Author   | {{{author}}} ({{{email}}})    |
| Date     | {{{time(%Y-%m-%d %H:%M:%S)}}} |
#+HTML: </div>

* 行为型模式

** 策略模式

*** 模式定义

策略模式封装了了算法族（行为族），使它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。

*** UML

#+HTML: <img src="https://www.dofactory.com/images/diagrams/net/strategy.gif"/>

*** Participants

- Strategy  (SortStrategy)
  - declares an interface common to all supported algorithms. Context uses this interface to call the algorithm defined by a ConcreteStrategy
- ConcreteStrategy  (QuickSort, ShellSort, MergeSort)
  - implements the algorithm using the Strategy interface
- Context  (SortedList)
  - is configured with a ConcreteStrategy object
  - maintains a reference to a Strategy object
  - may define an interface that lets Strategy access its data.




* 创建型模式

** 工厂方法模式

*** 模式定义

定义了一个创建对象的接口，由子类决定要实例化哪个具体类。该模式将实例化类的任务委托给子类。


*** UML

#+HTML: <img src="https://www.dofactory.com/images/diagrams/net/factory.gif"/>

- 创建者（Creator）类
  抽象类，定义一个 *抽象的工厂方法* ，子类实现此方法制造产品。创建者通常会包含依赖于抽象产品的代码，而这些抽象产品由子类制造。创建者不需要知道具体产品类型。


*** Participants

- Product  (Page)
  - defines the interface of objects the factory method creates
- ConcreteProduct  (SkillsPage, EducationPage, ExperiencePage)
  - implements the Product interface
- Creator  (Document)
  - declares the factory method, which returns an object of type Product. Creator may also define a default implementation of the factory method that returns a default ConcreteProduct object.
  - may call the factory method to create a Product object.
- ConcreteCreator  (Report, Resume)
  - overrides the factory method to return an instance of a ConcreteProduct.



** 抽象工厂模式

*** 模式定义

提供一个接口，用于创建一个 *创建对象的家族* 。

换句话说，该模式的任务是定义一个负责创建一组产品的接口。

*** UML

#+HTML: <img src="https://www.dofactory.com/images/diagrams/net/abstract.gif"/>

*** Participants


- AbstractFactory  (ContinentFactory)
  - declares an interface for operations that create abstract products
- ConcreteFactory   (AfricaFactory, AmericaFactory)
  - implements the operations to create concrete product objects
- AbstractProduct   (Herbivore, Carnivore)
  - declares an interface for a type of product object
- Product  (Wildebeest, Lion, Bison, Wolf)
  - defines a product object to be created by the corresponding concrete factory
  - implements the AbstractProduct interface
- Client  (AnimalWorld)
  - uses interfaces declared by AbstractFactory and AbstractProduct classes
