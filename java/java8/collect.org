#+TITLE:     Collect
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

* 1, 基本原理

** 1.1, 收集器

即 Collectors 类提供的工厂方法（例如 groupingBy )所创建的对象。主要提供三个功能:

- 将流元素归约和汇总为一个值
- 元素分组
- 元素分区

* 2, 代码示例

#+BEGIN_SRC java
  package com.cisco.ruan.nio;

  import static java.util.Comparator.*;
  import static java.util.stream.Collectors.*;

  import java.util.Arrays;
  import java.util.HashSet;
  import java.util.IntSummaryStatistics;
  import java.util.List;
  import java.util.Map;
  import java.util.Optional;
  import java.util.Set;

  import lombok.AllArgsConstructor;
  import lombok.Getter;

  public class Java8 {

      public static List<Dish> menu = Arrays.asList(new Dish("pork", false, 800, Dish.Type.MEAT),
                                                    new Dish("beef", false, 700, Dish.Type.MEAT),
                                                    new Dish("chicken", false, 400, Dish.Type.MEAT),
                                                    new Dish("french fries", true, 530, Dish.Type.OTHER),
                                                    new Dish("rice", true, 350, Dish.Type.OTHER),
                                                    new Dish("season fruit", true, 120, Dish.Type.OTHER),
                                                    new Dish("pizza", true, 550, Dish.Type.OTHER),
                                                    new Dish("prawns", false, 300, Dish.Type.FISH),
                                                    new Dish("salmon", false, 450, Dish.Type.FISH));

      public static void main(String[] args) {

          /* Stream Operation */
          System.out.println("===== getThreeHighCaloricDishNames (sort) =====");
          getThreeHighCaloricDishNames();
          System.out.println("===== getDistinctDishType (distinct) =====");
          getDistinctDishType();
          System.out.println("===== getAllCalories (reduce) =====");
          getAllCalories0();
          System.out.println("===== getAllCalories (mapToInt) =====");
          getAllCalories1();
          System.out.println("===== getMaxCalorie (reduce) =====");
          getMaxCalorie();

          /* Collect (Aggregation) */
          System.out.println("===== getTotalNumberOfDish (counting) =====");
          getTotalNumberOfDish();
          System.out.println("===== getMaxCalorie (maxBy) =====");
          getMaxCalorieDish();
          System.out.println("===== getAllCalories (summingInt) =====");
          getAllCalories2();
          System.out.println("===== getAverageCalorie (averagingInt) =====");
          getAverageCalorie();
          System.out.println("===== getStatistics (summarizingInt) =====");
          getStatistics();
          System.out.println("===== getShortMenu (joining) =====");
          getShortMenu();

          /* Collect (Grouping) */
          System.out.println("===== groupByCaloricLevel (groupingBy) =====");
          groupByCaloricLevel();
          System.out.println("===== groupByDishesAndTypeCaloricLevel (multi-level groupingBy) =====");
          groupByDishesAndTypeCaloricLevel();
          System.out.println("===== groupByDishesAndTypeCaloricLevel (counting on substream) =====");
          getTotalNumberOfDishByType();
          System.out.println("===== getMostCaloricByType (maxBy on substream) =====");
          getMostCaloricByType0();
          System.out.println("===== getMostCaloricByType (collectingAndThen) =====");
          getMostCaloricByType1();
          System.out.println("===== getTotalCaloriesByType (summingInt on substream) =====");
          getTotalCaloriesByType();
          System.out.println("===== getCaloricLevelsByType (mapping on substream and collect in set) =====");
          getCaloricLevelsByType();
          System.out.println("===== getCaloricLevelsByType (mapping on substream and collect in hashset) =====");
          getCaloricLevelsByType1();

          /* Collect (Partition) */
          System.out.println("===== getVegetarianDishes (partitioningBy) =====");
          getVegetarianDishes();
          System.out.println("===== getMostCaloricPartitionedByVegetarian (multi-level partitioningBy) =====");
          getMostCaloricPartitionedByVegetarian();

      }

      public static void getThreeHighCaloricDishNames() {
          menu.stream()
              .sorted(comparing(Dish::getCalories).reversed())
              .limit(3)
              .map(d -> d.getName())
              .forEach(System.out::println);
      }

      public static void getDistinctDishType() {
          menu.stream()
              .map(d -> d.getType())
              .distinct()
              .forEach(System.out::println);
      }

      public static void getAllCalories0() {
          int sum = menu.stream()
              .map(Dish::getCalories)
              .reduce(0, Integer::sum);
          System.out.println(sum);
      }

      public static void getAllCalories1() {
          int sum = menu.stream()
              .mapToInt(Dish::getCalories)
              .sum();
          System.out.println(sum);
      }

      public static void getMaxCalorie() {
          Optional<Integer> maxOp = menu.stream()
              .map(Dish::getCalories)
              .reduce(Integer::max);
          System.out.println(maxOp.orElse(0));
      }

      public static void getMaxCalorieDish() {
          Optional<Dish> maxOp = menu.stream()
              .collect(maxBy(comparingInt(Dish::getCalories)));
          maxOp.ifPresent(System.out::println);
      }

      public static void getTotalNumberOfDish() {
          long total = menu.stream()
              .collect(counting());
          System.out.println(total);
      }

      public static void getAllCalories2() {
          int sum = menu.stream()
              .collect(summingInt(Dish::getCalories));
          System.out.println(sum);
      }

      public static void getAverageCalorie() {
          double avg = menu.stream()
              .collect(averagingInt(Dish::getCalories));
          System.out.println(avg);
      }

      public static void getStatistics() {
          IntSummaryStatistics s = menu.stream()
              .collect(summarizingInt(Dish::getCalories));
          System.out.println(s);
      }

      public static void getShortMenu() {
          String j = menu.stream()
              .map(Dish::getName)
              .collect(joining(", "));
          System.out.println(j);
      }

      public static void groupByCaloricLevel() {
          Map<Dish.CaloricLevel, List<Dish>> dishesByCaloricLevel =
              menu.stream().collect( groupingBy(dish -> {
                          if (dish.getCalories() <= 400)
                              return Dish.CaloricLevel.DIET;
                          else if (dish.getCalories() <= 700)
                              return Dish.CaloricLevel.NORMAL;
                          else
                              return Dish.CaloricLevel.FAT;
                      } ));
          System.out.println(dishesByCaloricLevel);
      }

      public static void groupByDishesAndTypeCaloricLevel() {
          Map<Dish.Type, Map<Dish.CaloricLevel, List<Dish>>> dishesByTypeCaloricLevel =
              menu.stream()
              .collect(groupingBy(Dish::getType,
                                  groupingBy(dish -> {
                                          if (dish.getCalories() <= 400)
                                              return Dish.CaloricLevel.DIET;
                                          else if (dish.getCalories() <= 700)
                                              return Dish.CaloricLevel.NORMAL;
                                          else
                                              return Dish.CaloricLevel.FAT;
                                      }  )
                                  )
                       );
          System.out.println(dishesByTypeCaloricLevel);
      }

      public static void getTotalNumberOfDishByType() {
          Map<Dish.Type,Long> typesCount =
              menu.stream()
              .collect(groupingBy(Dish::getType,
                                  counting()));
          System.out.println(typesCount);
      }

      public static void getMostCaloricByType0() {
          Map<Dish.Type, Optional<Dish>> mostCaloricByType =
              menu.stream()
              .collect(groupingBy(Dish::getType,
                                  maxBy(comparingInt(Dish::getCalories))));
          System.out.println(mostCaloricByType);
      }

      public static void getMostCaloricByType1() {
          Map<Dish.Type, Dish> mostCaloricByType =
              menu.stream()
              .collect(groupingBy(Dish::getType,
                                  collectingAndThen(maxBy(comparingInt(Dish::getCalories)),
                                                    Optional::get)
                                  ));
          System.out.println(mostCaloricByType);
      }

      public static void getCaloricLevelsByType() {
          Map<Dish.Type, Set<Dish.CaloricLevel>> caloricLevelsByType =
              menu.stream().collect(groupingBy(Dish::getType,
                                               mapping( dish -> {
                                                       if (dish.getCalories() <= 400)
                                                           return Dish.CaloricLevel.DIET;
                                                       else if (dish.getCalories() <= 700)
                                                           return Dish.CaloricLevel.NORMAL;
                                                       else
                                                           return Dish.CaloricLevel.FAT;
                                                   },
                                                   toSet())));
          System.out.println(caloricLevelsByType);
      }

      public static void getCaloricLevelsByType1() {
          Map<Dish.Type, Set<Dish.CaloricLevel>> caloricLevelsByType =
              menu.stream().collect(groupingBy(Dish::getType,
                                               mapping( dish -> {
                                                       if (dish.getCalories() <= 400)
                                                           return Dish.CaloricLevel.DIET;
                                                       else if (dish.getCalories() <= 700)
                                                           return Dish.CaloricLevel.NORMAL;
                                                       else
                                                           return Dish.CaloricLevel.FAT;
                                                   },
                                                   toCollection(HashSet::new))));
          System.out.println(caloricLevelsByType);
      }

      public static void getTotalCaloriesByType() {
          Map<Dish.Type, Integer> totalCaloriesByType =
              menu.stream().collect(groupingBy(Dish::getType,
                                               summingInt(Dish::getCalories)));
          System.out.println(totalCaloriesByType);
      }

      public static void getVegetarianDishes() {
          Map<Boolean, List<Dish>> partitionedMenu =
              menu.stream().collect(partitioningBy(Dish::isVegetarian));
          System.out.println(partitionedMenu.get(true));
      }

      public static void getMostCaloricPartitionedByVegetarian() {
          Map<Boolean, String> mostCaloricPartitionedByVegetarian =
              menu.stream().collect(partitioningBy(Dish::isVegetarian,
                                                   collectingAndThen(maxBy(comparingInt(Dish::getCalories)),
                                                                     op -> op.get().getName())));
          System.out.println(mostCaloricPartitionedByVegetarian);
      }

  }

  @AllArgsConstructor
  class Dish {

      @Getter private final String name;
      @Getter private final boolean vegetarian;
      @Getter private final int calories;
      @Getter private final Type type;

      public enum Type { MEAT, FISH, OTHER }

      public enum CaloricLevel { DIET, NORMAL, FAT }
  }

#+END_SRC


#+BEGIN_EXAMPLE
===== getThreeHighCaloricDishNames (sort) =====
pork
beef
pizza
===== getDistinctDishType (distinct) =====
MEAT
OTHER
FISH
===== getAllCalories (reduce) =====
4200
===== getAllCalories (mapToInt) =====
4200
===== getMaxCalorie (reduce) =====
800
===== getTotalNumberOfDish (counting) =====
9
===== getMaxCalorie (maxBy) =====
com.cisco.ruan.nio.Dish@27bc2616
===== getAllCalories (summingInt) =====
4200
===== getAverageCalorie (averagingInt) =====
466.6666666666667
===== getStatistics (summarizingInt) =====
IntSummaryStatistics{count=9, sum=4200, min=120, average=466.666667, max=800}
===== getShortMenu (joining) =====
pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon
===== groupByCaloricLevel (groupingBy) =====
{NORMAL=[com.cisco.ruan.nio.Dish@179d3b25, com.cisco.ruan.nio.Dish@254989ff, com.cisco.ruan.nio.Dish@5d099f62, com.cisco.ruan.nio.Dish@37f8bb67], DIET=[com.cisco.ruan.nio.Dish@49c2faae, com.cisco.ruan.nio.Dish@20ad9418, com.cisco.ruan.nio.Dish@31cefde0, com.cisco.ruan.nio.Dish@439f5b3d], FAT=[com.cisco.ruan.nio.Dish@27bc2616]}
===== groupByDishesAndTypeCaloricLevel (multi-level groupingBy) =====
{OTHER={NORMAL=[com.cisco.ruan.nio.Dish@254989ff, com.cisco.ruan.nio.Dish@5d099f62], DIET=[com.cisco.ruan.nio.Dish@20ad9418, com.cisco.ruan.nio.Dish@31cefde0]}, FISH={NORMAL=[com.cisco.ruan.nio.Dish@37f8bb67], DIET=[com.cisco.ruan.nio.Dish@439f5b3d]}, MEAT={NORMAL=[com.cisco.ruan.nio.Dish@179d3b25], DIET=[com.cisco.ruan.nio.Dish@49c2faae], FAT=[com.cisco.ruan.nio.Dish@27bc2616]}}
===== groupByDishesAndTypeCaloricLevel (counting on substream) =====
{OTHER=4, FISH=2, MEAT=3}
===== getMostCaloricByType (maxBy on substream) =====
{OTHER=Optional[com.cisco.ruan.nio.Dish@5d099f62], FISH=Optional[com.cisco.ruan.nio.Dish@37f8bb67], MEAT=Optional[com.cisco.ruan.nio.Dish@27bc2616]}
===== getMostCaloricByType (collectingAndThen) =====
{OTHER=com.cisco.ruan.nio.Dish@5d099f62, FISH=com.cisco.ruan.nio.Dish@37f8bb67, MEAT=com.cisco.ruan.nio.Dish@27bc2616}
===== getTotalCaloriesByType (summingInt on substream) =====
{OTHER=1550, FISH=750, MEAT=1900}
===== getCaloricLevelsByType (mapping on substream and collect in set) =====
{OTHER=[NORMAL, DIET], FISH=[NORMAL, DIET], MEAT=[NORMAL, DIET, FAT]}
===== getCaloricLevelsByType (mapping on substream and collect in hashset) =====
{OTHER=[NORMAL, DIET], FISH=[NORMAL, DIET], MEAT=[NORMAL, DIET, FAT]}
===== getVegetarianDishes (partitioningBy) =====
[com.cisco.ruan.nio.Dish@254989ff, com.cisco.ruan.nio.Dish@20ad9418, com.cisco.ruan.nio.Dish@31cefde0, com.cisco.ruan.nio.Dish@5d099f62]
===== getMostCaloricPartitionedByVegetarian (multi-level partitioningBy) =====
{false=pork, true=pizza}
#+END_EXAMPLE