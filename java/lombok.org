#+TITLE:     Lombok
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

* 1, 常用声明


** 1.1, val

声明局部变量为 final ，不能用于对象属性

#+BEGIN_SRC java
  public class ValExample {
    public String example() {
      val example = new ArrayList<String>();
      example.add("Hello, World!");
      val foo = example.get(0);
      return foo.toLowerCase();
    }

    public void example2() {
      val map = new HashMap<Integer, String>();
      map.put(0, "zero");
      map.put(5, "five");
      for (val entry : map.entrySet()) {
        System.out.printf("%d: %s\n", entry.getKey(), entry.getValue());
      }
    }
  }
#+END_SRC


** 1.2, @NonNull

用于方法或构造函数的参数前，若参数为 null ，则抛出 NullPointerException

#+BEGIN_SRC java
  public class NonNullExample extends Something {
    private String name;

    public NonNullExample(@NonNull Person person) {
      super("Hello");
      this.name = person.getName();
    }
  }
#+END_SRC


** 1.3, @Cleanup

用于局部变量声明，若清理方法名字不为 close ，则通过 =@Cleanup("dispose")= 指定\\
（不支持带有参数的清理方法）

#+BEGIN_SRC java
  public class CleanupExample {
    public static void main(String[] args) throws IOException {
      @Cleanup InputStream in = new FileInputStream(args[0]);
      @Cleanup OutputStream out = new FileOutputStream(args[1]);
      byte[] b = new byte[10000];
      while (true) {
        int r = in.read(b);
        if (r == -1) break;
        out.write(b, 0, r);
      }
    }
  }
#+END_SRC


** 1.4, @Getter / @Setter


** 1.5, @ToString

** 1.6, @EqualsAndHashCode

** 1.7, @Data

@ToString, @EqualsAndHashCode, @Getter (on all fields), @Setter (on all non-final fields), and @RequiredArgsConstructor


** 1.8, @Builder


** 1.9, @SneakyThrows


** 1.10, @Synchronized

实例方法上锁住对象 $lock , 静态方法上锁住对象 $LOCK


** 1.11, @Getter(lazy=true)

#+BEGIN_SRC java
  public class GetterLazyExample {
    @Getter(lazy=true) private final double[] cached = expensive();

    private double[] expensive() {
      double[] result = new double[1000000];
      for (int i = 0; i < result.length; i++) {
        result[i] = Math.asin(i);
      }
      return result;
    }
  }
#+END_SRC

#+BEGIN_SRC java
  public class GetterLazyExample {
    private final java.util.concurrent.AtomicReference<java.lang.Object> cached = new java.util.concurrent.AtomicReference<java.lang.Object>();

    public double[] getCached() {
      java.lang.Object value = this.cached.get();
      if (value == null) {
        synchronized(this.cached) {
          value = this.cached.get();
          if (value == null) {
            final double[] actualValue = expensive();
            value = actualValue == null ? this.cached : actualValue;
            this.cached.set(value);
          }
        }
      }
      return (double[])(value == this.cached ? null : value);
    }

    private double[] expensive() {
      double[] result = new double[1000000];
      for (int i = 0; i < result.length; i++) {
        result[i] = Math.asin(i);
      }
      return result;
    }
  }
#+END_SRC

** 1.12, @NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor

#+BEGIN_SRC java
  @RequiredArgsConstructor(staticName = "of")
  @AllArgsConstructor(access = AccessLevel.PROTECTED)
  public class ConstructorExample<T> {
    private int x, y;
    @NonNull private T description;

    @NoArgsConstructor
    public static class NoArgsExample {
      @NonNull private String field;
    }
  }
#+END_SRC

#+BEGIN_SRC java
  public class ConstructorExample<T> {
    private int x, y;
    @NonNull private T description;

    private ConstructorExample(T description) {
      if (description == null) throw new NullPointerException("description");
      this.description = description;
    }

    public static <T> ConstructorExample<T> of(T description) {
      return new ConstructorExample<T>(description);
    }

    @java.beans.ConstructorProperties({"x", "y", "description"})
    protected ConstructorExample(int x, int y, T description) {
      if (description == null) throw new NullPointerException("description");
      this.x = x;
      this.y = y;
      this.description = description;
    }

    public static class NoArgsExample {
      @NonNull private String field;

      public NoArgsExample() {
      }
    }
  }
#+END_SRC