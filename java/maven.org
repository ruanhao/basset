#+TITLE:     Maven
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall


* Make all-in-one jar

Use maven-assembly-plugin and call =mvn assembly:assembly=

#+BEGIN_SRC xml
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.2</version>
        <executions>
          <execution>
            <id>create-executable-jar</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <archive>
            <manifest>
              <mainClass>com.ruan.test.App</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>
#+END_SRC


* Show help

#+BEGIN_SRC sh
mvn help:describe -Dplugin=org.apache.maven.plugins:maven-compiler-plugin -Ddetail
#+END_SRC


* Show effective pom

=mvn help:effective-pom=


* Ignore test

=mvn install -Dmaven.test.skip=true=


* Copy dependencies

#+BEGIN_SRC sh
  mvn dependency:copy-dependencies -DoutputDirectory=lib -DexcludeScope=provided,test -DincludeScope=runtime
#+END_SRC

如果没有指定 -DoutputDirectory ，默认拷贝至 target/dependency 目录下

#+BEGIN_SRC xml
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-dependency-plugin</artifactId>
    <version>2.10</version>

    <executions>
      <execution>
        <id>copy</id>
        <phase>compile</phase>
        <goals>
          <goal>copy-dependencies</goal>
        </goals>
        <configuration>
          <excludeScope>provided,test</excludeScope>
          <outputDirectory>${project.build.directory}/lib</outputDirectory>
        </configuration>
      </execution>
    </executions>
  </plugin>
#+END_SRC


* Maven install file

#+BEGIN_SRC sh
  mvn install:install-file -Dfile=/root/cisco.jar -DgroupId=com.cisco.ruan -DartifactId=helloworld -Dversion=1.0.0 -Dpackaging=jar -DgeneratePom=true
#+END_SRC


* List lifecycle phases along with bound goals

=mvn help:describe -Dcmd=compile= *不一定完整*


* Create Maven project

#+BEGIN_SRC sh
  ## Simple Project
  mvn archetype:generate -DgroupId=com.cisco.ruan -DartifactId=helloworld

  ## Web Project
  mvn archetype:generate -DgroupId=com.cisco.ruan -DartifactId=helloworld -DarchetypeArtifactId=maven-archetype-webapp

  ## Available archetypes:
  ## maven-archetype-mojo
  ## maven-archetype-quickstart
  ## maven-archetype-site
  ## maven-archetype-webapp

#+END_SRC


* Disable a Maven plugin defined in a parent POM

#+BEGIN_SRC xml
  <plugin>
     <groupId>group</groupId>
     <artifactId>artifact</artifactId>
     <configuration>
       <skip>true</skip>
     </configuration>
  </plugin>
#+END_SRC

Can also use:

#+BEGIN_SRC xml
<plugin>
<groupId>group</groupId>
 <artifactId>artifact</artifactId>
<executions>
     <execution>
       <id>TheNameOfTheRelevantExecution</id>
       <phase>none</phase>
     </execution>
</executions>
</plugin>
#+END_SRC


* Maven execute main class

=mvn exec:java -Dexec.mainClass=com.cisco.ruan.App=

*须在本模块中执行，不能在父模块中执行*


* Download dependencies sources

=mvn dependency:sources=


* 下载文档和源码，并生成 eclipse 工程配置文件

=mvn -DdownloadJavadocs=true -DdownloadSources=true eclipse:eclipse=


* 解析 Dependency

mvn dependency:resolve

#+BEGIN_SRC xml
  <plugin>
    <artifactId>maven-dependency-plugin</artifactId>
    <executions>
      <execution>
        <phase>generate-resources</phase>
        <goals><goal>resolve</goal></goals>
        <configuration>
          <outputFile>${project.build.directory}/dependencies.txt</outputFile>
        </configuration>
      </execution>
    </executions>
  </plugin>
#+END_SRC

* 上传源码到仓库

=mvn clean source:jar install=


* 将指定资源（配置文件，生成的 jar 包， war 包等）复制到指定目录

#+BEGIN_SRC xml
  <plugin>
      <artifactId>maven-resources-plugin</artifactId>
      <version>2.4.2</version>
      <executions>
          <execution>
              <id>copy-target-jar</id>
              <phase>package</phase>
              <goals>
                  <goal>copy-resources</goal>
              </goals>
              <configuration>
                  <outputDirectory>${project.basedir}/release/lib/</outputDirectory>
                      <overwrite>true</overwrite>
                  <resources>
                      <resource>
                          <directory>${project.build.directory}</directory>
                          <filtering>false</filtering>
                          <includes>
                              <include>*.jar</include>
                          </includes>
                      </resource>
                  </resources>
              </configuration>
          </execution>

          <execution>
              <id>copy-configuration</id>
              <phase>package</phase>
              <goals>
                  <goal>copy-resources</goal>
              </goals>
              <configuration>
                  <outputDirectory>${project.basedir}/release/conf/</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                      <resource>
                          <directory>${project.basedir}/src/main/resources/</directory>
                          <filtering>false</filtering>
                          <excludes>
                              <exclude>plugins/*</exclude>
                              <exclude>plugins/*/*</exclude>
                          </excludes>
                      </resource>
                  </resources>
              </configuration>
          </execution>

          <execution>
              <id>copy-war</id>
              <phase>package</phase>
              <goals>
                  <goal>copy-resources</goal>
              </goals>
              <configuration>
                  <outputDirectory>${project.basedir}/release/</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                      <resource>
                          <directory>${project.build.directory}</directory>
                          <filtering>false</filtering>
                          <includes>
                              <include>*.war</include>
                          </includes>
                      </resource>
                  </resources>
              </configuration>
          </execution>
      </executions>
  </plugin>
#+END_SRC


* Mechanism

** Dependency

#+BEGIN_SRC xml
  <dependency>
    <groupId>org.opendaylight.dlux</groupId>groupId>
    <artifactId>features-dlux</artifactId>artifactId>
    <version>0.2.1-Lithium-SR1</version>version>
    <classifier>features</classifier>classifier>
    <type>xml</type>type>
    <scope>runtime</scope>scope>
  </dependency>
#+END_SRC

实际只会下载 *features-dlux-0.2.1-Lithium-SR1-features.xml* 和 *features-dlux-0.2.1-Lithium-SR1.pom* 两个文件和 pom 文件中定义的各个依赖

*features-dlux-0.2.1-Lithium-SR1.jar 不会下载*

*scope 的值应该是被打包插件或其他插件所使用*


** Package lifecycle

若 packaging 类型不在 =~/.m2/repository/org/apache/maven/maven-core/3.0.3/META-INF/plexus= 中定义，则必须在 plugin 中定义

该 plugin 须提供相应的 lifecycle，且须声明 <extensions>

#+BEGIN_SRC xml
  <plugin>
    <groupId>org.apache.karaf.tooling</groupId>
    <artifactId>karaf-maven-plugin</artifactId>
    <extensions>true</extensions>
  </plugin>
#+END_SRC

lifecycle is defined in =karaf-maven-plugin-4.0.3.jar/META-INF/plexus/components.xml=
