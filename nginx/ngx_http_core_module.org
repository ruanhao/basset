#+TITLE:     ngx_http_core_module
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

* 一，转发功能

#+BEGIN_SRC sh
location    <uri> { ... }  ## 对当前路径及子路径下的所有资源都生效
location =  <uri> { ... }  ## 只对当前路径生效（精确匹配，不包括子路径）
location ~  <uri> { ... }  ## 正则匹配（区分大小写）
location ~* <uri> { ... }  ## 正则匹配（不区分大小写）
location ^~ <uri> { ... }  ## 降低正则匹配的优先级

#+END_SRC

- 优先级

  #+BEGIN_EXAMPLE
  1. Directives with the "=" prefix that match the query exactly. If found, searching stops.
  2. All remaining directives with literal strings. If this match used the "^~" prefix, searching stops.
  3. Regular expressions, in the order they are defined in the configuration file.
  4. If #3 yielded a match, that result is used. Otherwise, the match from #2 is used.
  #+END_EXAMPLE

- 访问控制

  默认是 =allow all= ，如果要启用访问控制功能，则最后一行必须为 =deny all=

  #+BEGIN_SRC
  location <uri> {
      deny  192.168.0.2;
      allow 192.168.1.0/24;
      deny  all;
  }
  #+END_SRC

- 转发规则

  location 和 target 尽量都以 / 结尾，否则可能会遇到循环重定向问题，遇到问题请抓包分析即可知来龙去脉。

  #+BEGIN_SRC sh
    location /hello {
        root /home/test;   ## 访问 http://<domain>/hello
                           ## 若不存在目录 /home/test/hello ，则返回 404
                           ## 若存在目录   /home/test/hello ，重定向至 https://<domain>/hello/，默认请求 /home/test/hello/index.html
    }

    location /hello {
        root /home/test/;  ## 同上
    }

    location /hello/ {
        root /home/test;   ## 访问 http://<domain>/hello ， 无法匹配，返回 404
                           ## 访问 https://<domain>/hello/，默认请求 /home/test/hello/index.html
    }

    location /hello/ {
        root /home/test/;  ## 同上
    }
  #+END_SRC

  #+BEGIN_SRC sh
    location /world {
        proxy_pass http://127.0.0.1:9999;   ## 访问 http://<domain>/world ，   转发为 GET /world HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET /world/hk HTTP/1.0
    }

    location /world {
        proxy_pass http://127.0.0.1:9999/;  ## 访问 http://<domain>/world ，   转发为 GET / HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET //hk HTTP/1.0
                                            ## / + (/world/hk - /world) = / + /hk = //hk
    }

    location /world/ {
        proxy_pass http://127.0.0.1:9999;   ## 访问 http://<domain>/world ，   重定向为 http://<domain>/world/ ，转发为 GET /world/ HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET /world/hk HTTP/1.0
    }

    location /world/ {
        proxy_pass http://127.0.0.1:9999/;  ## 访问 http://<domain>/world ，   重定向为 http://<domain>/world/ ，转发为 GET / HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET /hk HTTP/1.0
                                            ## / + (/workd/hk - /world/) = / + hk = /hk
    }
  #+END_SRC


* 二，设置 Header

#+BEGIN_SRC sh
  server {
      listen 40839;
      server_name localhost;
      location / {
          proxy_set_header X-Real-IP $remote_addr; # 设置转发出去的请求的 Header
          add_header X-Via $server_addr;           # 设置返回回去的回复的 Header
          proxy_pass http://1.2.3.4/;
      }
  }
#+END_SRC

* 参考资料

[[http://nginx.org/en/docs/http/ngx_http_core_module.html][ngx_http_core_module reference]]
