#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall



** Property

*** getter

#+BEGIN_SRC python
  class Circle(object):
      def __init__(self, radius):
          self.radius = radius
      @property
      def area(self):
          return math.pi * self.radius**2

  ## Note that: Circle.area returns <property object>
#+END_SRC

*** setter & deleter

#+BEGIN_SRC python
  class Foo(object):
      def __init__(self, name):
          self.__name = name
      @property
      def name(self):
          return self.__name
      @name.setter
      def name(self, value):
          self.__name = value
      @name.deleter
      def name(self):
          del self.__name
#+END_SRC

** Descriptor

#+BEGIN_EXAMPLE
Descriptors with only the __get__() method are called non-data descriptors.
Non-data descriptors are used to provide a value when an instance itself does not have a value.
Thus, setting the attribute on an instance 'hides' the descriptor.
This is particularly useful in the case of functions (which are non-data descriptors) as it allows one to hide a function defined in the class by attaching one to an instance.
#+END_EXAMPLE

#+BEGIN_SRC python
  class Name(object):
      def __get__(self):
          return "Ronald"

  class Test(object):
      name = Name()

  t = Test()
  t.name = "Rooney"
  print t.name ## Rooney
#+END_SRC

#+BEGIN_EXAMPLE
Note that when accessed from the class itself, only the __get__() method comes in the picture,
setting or deleting the attribute will actually replace or remove the descriptor.
#+END_EXAMPLE

#+BEGIN_SRC python
  class Name(object):
      def __get__(self):
          pass
      def __set__(self):
          pass
      def __delete__(self):
          pass

  class Test(object):
      name = Name()

  Test.name = "DeGea"
  print Test().name # DeGea
#+END_SRC
