#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

#+BEGIN_SRC shell


- 变量检查

#+BEGIN_SRC sh
  : ${variable?error_msg} ## 一种检查变量是否设置的方法，
                          ## 若没有设置，则error_msg会输出到std_err中

#+END_SRC

- 获取最后一个参数

  #+BEGIN_SRC sh
    num=$#; ${!num}         ## 最后一个参数
                            ## 不能直接写作${!$#}，这是一种**间接引用**
                            ## ruanhao: ${$num}是不允许的，因为变量替换不能嵌套，
                            ## 但是类似${var:$len}是可行的
  #+END_SRC


- 赋值时变量不扩展

#+BEGIN_SRC sh
  var1="hello world"
  var2=$var1    ## var2: "hello world"
  echo $var1    ## hello world
  ## **数组赋值例外**
  b=( 1 2 3 )
  a=( ${b[*]} ) ## a has 3 elements, not "1 2 3"
#+END_SRC


- 匹配之前的变量

  #+BEGIN_SRC sh
    ${!varprefix*} ## 匹配所有之前声明过的，并且以varprefix开头的变量
    ${!varprefix@} ## 同上
    xyz23=whatever
    xyz24=
    a=${!xyz*}                     ## 展开所有以"xyz"开头的，并且之前声明过的变量名
    echo "a = $a"                  ## a = xyz23 xyz24
    a=${!xyz@}                     ## 同上
  #+END_SRC


- 算数操作

  #+BEGIN_SRC sh
    (( t = a < 1 ? 2 : 3 ))        ## C语言风格的三元操作
    : $(( n = 3 ))                 ## 这里利用了$(())的副作用
    (( n = 3 ))                    ## 上一条的简便写法
  #+END_SRC

- 变量作用范围

  #+BEGIN_SRC sh
    a=3
    echo hello | (cat; a=888)
    echo $a  ## 3
    echo hello | {cat; a=888}
    echo $a  ## 888
  #+END_SRC


- 循环

  #+BEGIN_SRC sh
    for i in {0..100..3}; do
        echo $i
    done
  #+END_SRC

- glob-expand-word

  =Esc *=

- 进制转换

  #+BEGIN_SRC sh
    # $((BASE#NUMBER))
    echo $((2#10))  # 2
    echo $((5#10))  # 5
    echo $((8#10))  # 8
    echo $((10#10)) # 10
    echo $((16#10)) # 16
    echo $((64#10)) # 64
  #+END_SRC

- 遍历文件

  =find -type f -name "*.txt" | while read f; do echo "i have $f"; done=

- 打印水平分隔符

  =printf '%100s\n' | tr ' ' ==

- 打印文件某一行

  =sed -n '1000p;1000q' <filename>=

- 打印文件某几行

  =sed -n '10,20p;20q' <filename>=

- 生成随机数
  =head -c4 /dev/urandom | od -An -tu4=

- 重复生成单词

  =echo hello{,,,}=

- 大小写转换

  #+BEGIN_SRC sh
    echo ${var^^}
    echo ${var,,}
    tr '[:lower:]' '[:upper:]'
  #+END_SRC

- 过滤不可打印字符

  =tr -dc '[:print:]' </dev/urandom=

- 查看字符的二进制表示

  #+BEGIN_SRC sh
    echo ★  | hexdump -C
    showkey -a
  #+END_SRC


- 删除空行

  #+BEGIN_SRC sh
    grep .
    awk NF
  #+END_SRC


- 删除前导空格

  #+BEGIN_SRC sh
    awk '{$1=$1}1' FILE
    echo $line | xargs
  #+END_SRC

- 跳过文件首尾行

  #+BEGIN_SRC sh
    head file.txt               # 开始 10 行
    tail file.txt               # 最后 10 行
    head -n 20 file.txt         # 开始 20 行
    tail -n 20 file.txt         # 最后 20 行
    head -20 file.txt           # 开始 20 行
    tail -20 file.txt           # 最后 20 行
    head -n -5 file.txt         # 排除最后 5 行
    tail -n +5 file.txt         # 从第 5 行开始到最后
  #+END_SRC

- 为 man 建立 pdf

  #+BEGIN_SRC sh
      man -t <command> | ps2pdf - > filename.pdf
  #+END_SRC
