#+TITLE:     find
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

* 基本用法


** 根据时间查询


- 最近 10 分钟内修改过的文件

  =find . -mmin -10=

- 最近 1 小时内修改过的文件

  =find / -mtime -1=

- 最近 1 分钟内访问过的文件

  =find . -amin -1=

- 最近 1 分钟内创建的文件

  =find . -cmin -1=

- newer (modify)

  =find . -newer file1.txt -not -newer file2.txt=

- anewer (access)

- cnewer (create)


** 根据大小查询

+ 按字节

#+BEGIN_SRC sh
  find . -size  1024c             # = 1024 bytes
  find . -size +1024c             # > 1024 bytes
  find . -size -1024c             # < 1024 bytes
#+END_SRC


+ 按块(512 bytes)

#+BEGIN_SRC sh
  find . -size  2                  # = 1024 bytes
  find . -size +2                  # > 1024 bytes
  find . -size -2                  # < 1024 bytes
#+END_SRC

+ 按 k

#+BEGIN_SRC sh
  find . -size  1k                # = 1024 bypts
  find . -size +1k                # > 1024 bypts
  find . -size -1k                # < 1024 bypts
#+END_SRC


+ 空文件

  =find . -size 0=

+ 空文件或目录

  =find . -empty=


** 指定多个目录查询

=find /usr /home /tmp -name \*.jar=


** 使用 -prune

#+BEGIN_EXAMPLE
-prune   If the file is a directory, do not descend into it. Return true.
         If -depth is given, no effect. Return false.
         Because -delete implies -depth, you cannot usefully use -prune and -delete together.
#+END_EXAMPLE

- 忽略路径

  =find . \( -path "./path1" -o -path "./path2" \) -prune -o -name "filename" -print=


** 使用 -exec

=find -iname "myprogram.c" -exec md5sum {} \;=


** 使用 -inum

=find -inum 888888 -delete=



* 常用命令

- 找出 5 个最大的文件

  =find . -type f -exec ls -s {} \; | sort -n -r | head -5=

- 找出 5 个最小的文件

  =find . -type f -exec ls -s {} \; | sort -n | head -5=

- 找出某个时间点之后的文件

  #+BEGIN_SRC sh
    touch -t 05042140 stampfile
    find . -newer stampfile
  #+END_SRC

- 删除空目录

  =find . -type d -empty -delete=



* 注意事项

- 使用 -o 选项时建议明确指明 -print

  If the given expression to find does not contain any of the “action” primaries ‑exec, ‑ok, or ‑print, then the given expression is effectively replaced by:

  =find \( expression \) -print=

  The implied parenthesis can cause unexpected results.

  For example, consider these two similar commands:

  #+BEGIN_SRC bash
  $ find -name tmp -prune -o -name \*.txt
  ./bin/data/secret.txt
  ./tmp
  ./missingEOL.txt
  ./public_html/graphics/README.txt
  ./datafile.txt

  $ find -name tmp -prune -o -name \*.txt -print
  ./bin/data/secret.txt
  ./missingEOL.txt
  ./public_html/graphics/README.txt
  ./datafile.txt
  #+END_SRC

  The lack of an action in the first command means it is equivalent to:

  =find . \( -name tmp -prune -o -name \*.txt \) -print=

  This causes tmp to be included in the output.

  However for the second find command the normal rules of Boolean operator precedence apply, so the pruned directory does not appear in the output.
