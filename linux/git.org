#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall


* 1, 基本原理

* 2, 常用命令

** config

#+BEGIN_SRC sh
  git config --global user.name <name>
  git config --global user.email <email>
#+END_SRC

** branch

#+BEGIN_SRC sh
  git branch -D <branch_to_delete>
#+END_SRC

** push

#+BEGIN_SRC sh
  # 删除服务器上的 branch 或 tag
  git push origin :<branch_or_tag_to_delete>
#+END_SRC

** tag

annotated tag 保存为一个 tag 对象，而轻量级的 tag 作为某个 commit 对象的别名

#+BEGIN_SRC sh
  git tag -m <msg> <Tag>
  git tag -d <tag_to_delete>

  git tag -n # 显示所有 tag
#+END_SRC

** clean

#+BEGIN_SRC sh
  # 清除当前工作区中没有加入版本库的文件和目录（非跟踪文件和目录）
  git clean -fd
#+END_SRC

** rm

#+BEGIN_SRC sh
  git rm --cached <file> # 删除暂存区文件，工作区保持不变
#+END_SRC

** diff

#+BEGIN_SRC sh
  git diff                   # workspace & stage
  git diff <commit>          # workspace & <commit>
  git diff --cached|--staged # stage & HEAD
  git diff --cached <commit> # stage & <commit>

  git diff <commit1> <commit2> <filename>
#+END_SRC

** cat-file

=git cat-file= 等效于 =git show=

#+BEGIN_SRC sh
  git cat-file -p <sha>                  # 查看 sha 对应的内容，即历史文件
  git cat-file -p <:/path/to/file>       # 查看暂存区中的文件对象
  git cat-file -p <commit:/path/to/file> # 查看 commit 中的文件对象
  git cat-file <commit>                  # 查看 commit 对象

  git cat-file <commit:>                 # 查看 commit 对象对应的树对象
  git cat-file -p <commit^{tree}>        # 同上
#+END_SRC

** ls-*

#+BEGIN_SRC sh
  git ls-tree -r <commit> # 显示commit指向的目录树
  git ls-files -s # 显示暂存区的目录树
  git ls-remote <remote>
#+END_SRC

** reset

#+BEGIN_SRC sh
  git reset --hard <commit> # 替换 HEAD，替换暂存区，替换工作区
  git reset --soft <commit> # 替换 HEAD，暂存区不变，工作区不变
  git reset <commit>        # 替换 HEAD，替换暂存区，工作区不变

  git reset -- <filename> # 对 filename 的改动撤出暂存区
#+END_SRC

** checkout

#+BEGIN_SRC sh
  git checkout -- <filename>          # 暂存区中的 filename，覆盖工作区中的 filename
  git checkout <branch> -- <filename> # HEAD 不变，用 branch 指向的 filename 替换暂存区和工作区中的文件

  git checkout -- . # 用暂存区中的所有文件覆盖工作区中的文件
  git checkout .    # 同上n

  git checkout      # 汇总显示工作区，暂存区和 HEAD 的差异
  git checkout HEAD # 同上
#+END_SRC

** revert

#+BEGIN_SRC sh
  git revert -n                   # no commit
#+END_SRC


** log

#+BEGIN_SRC sh
  git log --oneline <commit^@> # 某次提交的历史提交，自身除外，用语法 commit^@ 表示

  git log --oneline <commit^!> # 只要提交本身，不包括其历史提交，用语法 commit^! 表示
#+END_SRC


** blame

=git blame -L <line>,+<incr> <filename>=

** rebase

=git rebase <since>= 等效于 =git rebase --onto <since> <since> HEAD=

#+BEGIN_EXAMPLE
  git rebase 的归一化形式：git rebase --onto <NewBase> <Since> <Till>

  变基操作过程：
    1) 首先执行 git checkout `Till`
    2) 将`Since`..`Till`标识的提交范围写到一个临时文件中
    3) git reset --hard `NewBase`
    4) 从保存在临时文件中的提交列表中，将提交逐一按顺序重新提交到重置后的分支上
    5) 如果遇到提交已经在分支中包含，则跳过改提交
    6) 如果在提交过程遇到冲突，则变基过程暂停；
       用户解决冲突后，执行 git rebase --continue 继续变基操作；
       或者执行git rebase --skip 跳过该次提交；
       或者执行 git rebase --abort 就此终止变基操作切换到变基前的分支上
#+END_EXAMPLE

** remote

#+BEGIN_SRC sh
  git remote show <remote> # Show status of remote
#+END_SRC

** rev-parse

#+BEGIN_SRC sh
  git rev-parse `Commit:/path/to/file` # 得到文件对应的 SHA
#+END_SRC

** Ignore whitespace

=-X ignore-all-space=

** stash

#+BEGIN_SRC sh
  git stash -u                    # 包括工作区
  git stash save -u "message"     # 包括工作区，加上注释
#+END_SRC
