#+TITLE:     OPENSSL
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall

* 1，基本知识

** 1.1，openssl 组成

- libcrypto: 加密库
- libssl: TLS/SSL 实现
- openssl: 命令行工具

** 1.2，X509 格式

内容包含：

- 公钥及其有效期
- 证书合法拥有者
- 证书该如何被使用 （用来签名或是用来加密）
- CA 的信息
- CA 的签名

** 1.3，Diffie-Hellman 交换过程

#+BEGIN_EXAMPLE
p：大素数
g：生成数
x：clnt_random
y：srv_random
#+END_EXAMPLE

#+BEGIN_SRC plantuml :file images/openssl-dh.png
  client -> server  : p, g
  rnote over client : p, g, x
  rnote over server : p, g, y
  client -> server  : g^x%p
  server -> client  : g^y%p
  rnote over client : p, g, x, g^(xy)%p
  rnote over server : p, g, y, g^(xy)%p
#+END_SRC

[[file:images/openssl-dh.png]]

** 1.4，算法种类

- 对称加密
  - DES  :: 56 bits
  - 3DES :: Tripple DES
  - AES  :: 128 bits

- 单向加密
  - MD5
  - SHA1, SHA192, SHA256, SHA384

- 公钥加密

  - DSA :: 仅用于签名
  - RSA :: 可用于加密或签名

* 2，常见用法

** 2.1，查询可用子命令

=openssl ?=

** 2.2，测试各种加密算法的速度

=openssl speed [ciphername]=

** 2.3，加解密

- 加密

  =openssl enc -des3 -a -in ./test-cipher -out test-cipher.des3=

- 解密

  =openssl enc -des3 -d -a -in ./test-cipher.des3 -out test-cipher=

** 2.4，计算文件特征码（指纹）

=openssl dgst -md5 <filename>=

** 2.5，生成密码串

=openssl passwd -1 -salt <saltvalue>=

-1 表示 MD5-Based Password algorithm


** 2.6，制作自签署证书

自签署证书一般作为 CA 的证书，普通的证书由 CA 来签署，也可以按照该步骤制作自签署的普通证书（将自身作为 CA ）：

1. 生成密钥

   #+BEGIN_SRC sh
     openssl genrsa 2048 >ca.key.pem    ## 生成 2048 位私钥
   #+END_SRC

2. 生成自签署证书

   #+BEGIN_SRC sh
     openssl req -new -x509 -key ca.key.pem -out ca.cert.pem -days 365 ## -x509 表示生成自签名证书
   #+END_SRC

** 2.7，从私钥中提取公钥

=openssl rsa -in ca.key.pem -pubout=

** 2.8，查看证书内容

=openssl x509 -text -in cert.pem=


** 2.9，签署证书

1. 部署 CA 证书

   #+BEGIN_SRC sh
     mkdir -p $CATOP/private  ## $CATOP: ./demoCA
     cp ca.key.pem $CATOP/private/cakey.pem
     cp ca.cert.pem $CATOP/cacert.pem
   #+END_SRC

2. 生成 csr

   =openssl req -new -key webserver.key -out webserver.csr=

3. 签署 csr

   #+BEGIN_SRC sh
     openssl ca -in webserver.csr -out webserver.crt ## 需先部署好 openssl 的 CA 证书
   #+END_SRC

可以通过这个脚本自动化签署证书，同时设置证书的有效日期：

#+BEGIN_SRC sh
  #!/usr/bin/env bash
  # -*- coding: utf-8 -*-
  CATOP=./demoCA
  rm -rf $CATOP
  mkdir -p $CATOP/certs           #
  mkdir -p $CATOP/crl             # 存放 Certificate Revoke List
  mkdir -p $CATOP/newcerts        # 存放证书
  mkdir -p $CATOP/private         # 存放 CA private key
  touch $CATOP/index.txt          # CA log file
  openssl genrsa -out usc.key.pem 2048
  openssl req -new -key usc.key.pem -out usc.csr.pem -subj "/C=US/ST=Califomia/L=Irvine/O=Cisco Systems, Inc./OU=Cisco Small Business/CN=Network Orchestrator"
  openssl ca -selfsign -keyfile usc.key.pem -startdate 20160901000000Z -days 7300 -batch -in usc.csr.pem -out usc.cert.pem -create_serial
  rm -rf demoCA
#+END_SRC

** 2.10，建立 ssl 连接

=openssl s_client -connect <ip>:<port>=

** 2.11，证书格式转换

|--------+-------------------------+-----------------------------|
| Format | Type                    | Header                      |
|--------+-------------------------+-----------------------------|
| PKCS#1 | RSAPublicKey            | BEGIN RSA PUBLIC KEY        |
| PKCS#1 | RSAPrivateKey           | BEGIN RSA PRIVATE KEY       |
| PKCS#8 | PrivateKeyInfo          | BEGIN PRIVATE KEY           |
| PKCS#8 | EncryptedPrivateKeyInfo | BEGIN ENCRYPTED PRIVATE KEY |
|--------+-------------------------+-----------------------------|

- PKCS#1 => PKCS#8

  =openssl pkcs8 -topk8 -inform pem -in key.pem -outform pem -nocrypt -out key.pkcs8.pem=

- PEM => PKCS#12

  =openssl pkcs12 -export -in ./cert.pem -inkey ./key.pem -out hello.p12=

** 2.12, 同时生成密钥和证书

#+BEGIN_SRC sh
  openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout key.pem
#+END_SRC

** 2.13, 查看服务器证书内容

#+BEGIN_SRC sh
  echo | openssl s_client -showcerts -connect 10.74.68.89:443 2>/dev/null | sed -n '/BEGIN CERTIFICATE/,/END CERTIFICATE/p'
#+END_SRC
