#+TITLE:     OPENSSL
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall



* SSL formats

** .csr

 The actual format is PKCS10 which is defined in RFC 2986.

** .pem

Defined in RFC's 1421 through 1424, this is a container format that *may include just the public certificate, or may include an entire certificate chain including public key, private key, and root certificates*. _PKCS10 format can be translated into PEM_.

** .key

This is a PEM formatted file containing just the private key of a specific certificate and is merely a conventional name and not a standardized one.

** .pkcs12 .pfx .p12

Originally defined by RSA in the Public-Key Cryptography Standards, the "12" variant was enhanced by Microsoft.

This is a passworded container format that contains both public and private key pairs.

Unlike .pem files, this container is fully encrypted. Openssl can turn this into a .pem file with both public and private keys: =openssl pkcs12 -in in.p12 -out out.pem -nodes=

** .der

A way to encode ASN.1 syntax in binary, *a .pem file is just a Base64 encoded .der file*.

OpenSSL can convert these to .pem =openssl x509 -inform der -in to-convert.der -out converted.pem=

Windows sees these as Certificate files.

** .cert .cer .crt

A .pem (or rarely .der) formatted file with a different extension, *one that is recognized by Windows Explorer* as a certificate, which .pem is not.


** *Summary*

*** PEM

Governed by RFCs, it's used preferentially by open-source software. It can have a variety of extensions (.pem, .key, .cer, .cert, more)

*** PKCS7

An open standard used by Java and supported by Windows. Does not contain private key material.

*** PKCS12

A private standard that provides enhanced security versus the plain-text PEM format. This can contain private key material. It's used preferentially by Windows systems, and can be freely converted to PEM format through use of openssl.

*** DER

The parent format of PEM. It's useful to think of it as a binary version of the base64-encoded PEM file. Not routinely used by much outside of Windows.


* X509 格式

包含

- 公钥及其有效期

- 证书合法拥有者

- 证书该如何被使用 （用来签名或是用来加密）

- CA 的信息

- CA 的签名



* OpenSSL

组成:

- libcrypto: 加密库

- libssl: TLS/SSL 实现

- openssl: 命令行工具


* openssl

** openssl ?

查询可用子命令

** openssl speed [ciphername]

测试各种加密算法的速度

** openssl enc

- 加密

  =openssl enc -des3 -a -in ./test-cipher -out test-cipher.des3=

- 解密

  =openssl enc -des3 -d -a -in ./test-cipher.des3 -out test-cipher=

** openssl dgst

计算文件特征码（指纹）

openssl dgst -md5 <filename>

** openssl passwd

生成密码串 (compute password hashes)

=openssl passwd -1 -salt <saltvalue>= :: '-1' means MD5-based password algorithm


* Openssl 实现私有CA

步骤

1. 生成一对密钥
2. 生成自签署证书

** 生成密钥

=openssl genrsa 2048 >private/cakey.pem= :: 生成 2048 位私钥

=openssl rsa -in private/cakey.pem -pubout= :: 提取公钥

** 生成自签署证书

=openssl req -new -x509 -key private/cakey.pem -out cacert.pem -days 365= :: -x509 表示生成自签名证书 ( 用于 CA )

=openssl x509 -text -in cacert.pem= :: 查看证书内容


* Openssl 签署证书

步骤

1. 生成 csr

   =openssl req -new -key webserver.key -out webserver.csr=

2. 签署 csr

   =openssl ca -in webserver.csr -out webserver.crt=

* 密码学

** Diffie-Hellman 协议

#+BEGIN_EXAMPLE

A [p(大素数), g(生成数)]       -----------------> B
A [p, g]                       ------------------ B [p, g]
A [p, g, x(A's random number)] ------------------ B [p, g, y(B's random number)]
A [g^x%p]                      -----------------> B
A                              <----------------- B [g^y%p]
A [p, g, x, g^y%p]             ------------------ B [p, g, y, g^x%p]
A [p, g, x, (g^y%p)^x]         ------------------ B [p, g, y, (g^x%p)^y]
A [p, g, x, g^(xy)%p]          ------------------ B [p, g, y, g^(xy)%p]

#+END_EXAMPLE

** 加密算法

*** 对称加密

- DES :: Data Encription Standard (56 bits)

- 3DES :: Tripple DES

- AES :: Advanced Encription Standard (128 bits)

- Blowfish

*** 单向加密

- MD4, MD5

- SHA1, SHA192, SHA256, SHA384

- CRC-32

*** 公钥加密

- DSA :: 只用于签名

- RSA :: 用于加密和签名


* Conversions

** pksc1 (traditional format) -> pksc8

=openssl pkcs8 -topk8 -inform pem -in cakey.pem -outform pem -nocrypt -out cakey.pkcs8.pem=

** pem -> pksc12

=openssl pkcs12 -export -in ./client.crt -inkey ./client.key -out client.p12=
