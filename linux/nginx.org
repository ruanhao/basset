#+TITLE:     Nginx
#+AUTHOR:    Hao Ruan
#+EMAIL:     ruanhao1116@gmail.com
#+LANGUAGE:  en
#+LINK_HOME: http://www.github.com/ruanhao
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+OPTIONS:   H:2 num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP:   showall


* 一，基本原理

** 1.1，设计架构

Nginx 会同时运行多个进程，一个主进程（master）和多个工作进程（worker），配置缓存时还会有缓存加载器进程（cache loader）和
缓存管理器进程（cache manager）等。所有进程均仅含一个线程，通过共享内存的机制实现进程间通信。主进程以 root 身份运行，
其余进程以非特权身份运行。

*** 1.1.1，master 进程

- 读取并验证配置信息
- 创建，绑定及关闭套接字
- 启动，终止及维护 worker 进程的个数
- 配置热部署（平滑升级）
- 编译嵌入式脚本
- 日志文件管理


*** 1.1.2，worker 进程

- 接受并处理客户端连接
- 提供反向代理及过滤功能


*** 1.1.3，cache loader 进程

- 建立内存数据库


*** 1.1.4，cache manager 进程

- 缓存失效及过期检查


* 二，配置示例

** 2.1，location

#+BEGIN_SRC sh
location    <uri> { ... }  ## 对当前路径及子路径下的所有资源都生效
location =  <uri> { ... }  ## 只对当前路径生效（精确匹配，不包括子路径）
location ~  <uri> { ... }  ## 正则匹配（区分大小写）
location ~* <uri> { ... }  ## 正则匹配（不区分大小写）
location ^~ <uri> { ... }  ## 降低正则匹配的优先级

#+END_SRC

- 优先级

  #+BEGIN_EXAMPLE
  1. Directives with the "=" prefix that match the query exactly. If found, searching stops.
  2. All remaining directives with literal strings. If this match used the "^~" prefix, searching stops.
  3. Regular expressions, in the order they are defined in the configuration file.
  4. If #3 yielded a match, that result is used. Otherwise, the match from #2 is used.
  #+END_EXAMPLE

- 访问控制

  默认是 =allow all=，如果要启用访问控制功能，则最后一行必须为 =deny all=

  #+BEGIN_SRC
  location <uri> {
      deny  192.168.0.2;
      allow 192.168.1.0/24;
      deny  all;
  }
  #+END_SRC

- 转发规则

  #+BEGIN_SRC sh
    location /hello {
        root /home/test;   ## 访问 http://<domain>/hello
                           ## 若不存在目录 /home/test/hello ，则返回 404
                           ## 若存在目录   /home/test/hello ，重定向至 https://<domain>/hello/，默认请求 /home/test/hello/index.html
    }

    location /hello {
        root /home/test/;  ## 同上
    }

    location /hello/ {
        root /home/test;   ## 访问 http://<domain>/hello ， 无法匹配，返回 404
                           ## 访问 https://<domain>/hello/，默认请求 /home/test/hello/index.html
    }

    location /hello/ {
        root /home/test/;  ## 同上
    }
  #+END_SRC

  #+BEGIN_SRC sh
    location /world {
        proxy_pass http://127.0.0.1:9999;   ## 访问 http://<domain>/world ，   转发为 GET /world HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET /world/hk HTTP/1.0
    }

    location /world {
        proxy_pass http://127.0.0.1:9999/;  ## 访问 http://<domain>/world ，   转发为 GET / HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET //hk HTTP/1.0
                                            ## / + (/world/hk - /world) = / + /hk = //hk
    }

    location /world/ {
        proxy_pass http://127.0.0.1:9999;   ## 访问 http://<domain>/world ，   重定向为 http://<domain>/world/ ，转发为 GET /world/ HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET /world/hk HTTP/1.0
    }

    location /world/ {
        proxy_pass http://127.0.0.1:9999/;  ## 访问 http://<domain>/world ，   重定向为 http://<domain>/world/ ，转发为 GET / HTTP/1.0
                                            ## 访问 http://<domain>/world/hk ，转发为 GET /hk HTTP/1.0
                                            ## / + (/workd/hk - /world/) = / + hk = /hk
    }
  #+END_SRC
